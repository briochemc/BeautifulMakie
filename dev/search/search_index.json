{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tip The easiest and fastest way to find what you are looking for is via the searching box at the top. Welcome to Beautiful Makie \u00a4 Makie is a high-performance, extendable, and multi-platform plotting ecosystem for the Julia programming language. For more examples go to the different menu sections. See also the official documentation . Cite From the japanese word Maki-e , which is a technique to sprinkle lacquer with gold and silver powder. Data is the gold and silver of our age, so let\u2019s spread it out beautifully on the screen! Simon Danisch . Learning resources \u00a4 There is a chapter about Makie in the book Julia Data Science . It's free but you could also order a printed version on Amazon . Installation \u00a4 To install the package, please go into a julia session and do as follows: julia>] pkg> add GLMakie Please follow the installation guide for more details. Community \u00a4 Ask your questions on discourse and Discord . Contributing Code \u00a4 Just go to the repo and see what is in the issues's menu . PRs are very welcome. Thanks to all the contributors ! Donation \u00a4 Support this project by sponsoring the main mantainer and creator of Makie, Simon Danisch . Keep supporting this project! Cite Makie \u00a4 BibTeX entry: @article{DanischKrumbiegel2021, doi = {10.21105/joss.03349}, url = {https://doi.org/10.21105/joss.03349}, year = {2021}, publisher = {The Open Journal}, volume = {6}, number = {65}, pages = {3349}, author = {Simon Danisch and Julius Krumbiegel}, title = {Makie.jl: Flexible high-performance data visualization for Julia}, journal = {Journal of Open Source Software} }","title":"Home"},{"location":"#welcome-to-beautiful-makie","text":"Makie is a high-performance, extendable, and multi-platform plotting ecosystem for the Julia programming language. For more examples go to the different menu sections. See also the official documentation . Cite From the japanese word Maki-e , which is a technique to sprinkle lacquer with gold and silver powder. Data is the gold and silver of our age, so let\u2019s spread it out beautifully on the screen! Simon Danisch .","title":"Welcome to Beautiful Makie"},{"location":"#learning-resources","text":"There is a chapter about Makie in the book Julia Data Science . It's free but you could also order a printed version on Amazon .","title":"Learning resources"},{"location":"#installation","text":"To install the package, please go into a julia session and do as follows: julia>] pkg> add GLMakie Please follow the installation guide for more details.","title":"Installation"},{"location":"#community","text":"Ask your questions on discourse and Discord .","title":"Community"},{"location":"#contributing-code","text":"Just go to the repo and see what is in the issues's menu . PRs are very welcome. Thanks to all the contributors !","title":"Contributing Code"},{"location":"#donation","text":"Support this project by sponsoring the main mantainer and creator of Makie, Simon Danisch . Keep supporting this project!","title":"Donation"},{"location":"#cite-makie","text":"BibTeX entry: @article{DanischKrumbiegel2021, doi = {10.21105/joss.03349}, url = {https://doi.org/10.21105/joss.03349}, year = {2021}, publisher = {The Open Journal}, volume = {6}, number = {65}, pages = {3349}, author = {Simon Danisch and Julius Krumbiegel}, title = {Makie.jl: Flexible high-performance data visualization for Julia}, journal = {Journal of Open Source Software} }","title":"Cite Makie"},{"location":"examples/generated/2d/animations/scatter_size/","text":"using GLMakie , Random GLMakie . activate! () Random . seed! ( 123 ) npts = 100 initms = 8 * rand ( npts ) with_theme ( theme_dark ()) do msize = Observable ( initms ) # this is the variable that will change # first frame, initial plot fig , ax = scatter ( 2 * rand ( npts ), rand ( npts ), markersize = msize , color = initms , colormap = ( :Greek , 0.75 ), strokewidth = 0.5 , strokecolor = :white , figure = ( resolution = ( 1200 , 800 ), fontsize = 22 ), axis = ( xlabel = \"x\" , ylabel = \"y\" ,)) limits! ( ax , 0 , 2 , 0 , 1 ) # the animation is done by updating the Observable values # change assets->(your folder) to make it work in your local env record ( fig , joinpath ( \"assets\" , \"animScatters.mp4\" ), framerate = 24 , profile = \"main\" ) do io for i in 1 : 0.1 : 8 msize [] = i * initms recordframe! ( io ) # record a new frame end end end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Scatter size"},{"location":"examples/generated/2d/aog/penguins/","text":"using CairoMakie , PalmerPenguins , DataFrames using GLM : lm , @formula , predict function getPenguins () ENV [ \"DATADEPS_ALWAYS_ACCEPT\" ] = \"true\" penguins = dropmissing ( DataFrame ( PalmerPenguins . load ())) return penguins end function plotPenguins () penguins = getPenguins () palette = ( color = tuple . ([ \"#FC7808\" , \"#8C00EC\" , \"#107A78\" ], 0.65 ), marker = [ :circle , :utriangle , :rect ]) cycle = Cycle ([ :color , :marker ], covary = true ) with_theme ( theme_light (), palette = palette , Scatter = ( cycle = cycle ,)) do fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], title = \"Flipper and bill length\" , xlabel = \"Flipper length (mm)\" , ylabel = \"Bill length (mm)\" ) for penguin in [ \"Adelie\" , \"Chinstrap\" , \"Gentoo\" ] specie = filter ( :species => == ( penguin ), penguins ) x = specie [ ! , :flipper_length_mm ] y = specie [ ! , :bill_length_mm ] linearModel = lm ( @formula ( Y ~ X ), DataFrame ( X = x , Y = y )) y\u0302 = predict ( linearModel ) scatter! ( ax , x , y ; markersize = 12 , label = penguin ) lines! ( ax , x , y\u0302 ; label = penguin , linewidth = 4 ) end axislegend ( \"Penguin species\" , position = :rb , bgcolor = ( :grey90 , 0.15 ), titlesize = 12 , labelsize = 12 , merge = true ) return fig end end fig = plotPenguins () Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"PalmerPenguins\" , \"DataFrames\" , \"GLM\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [a93c6f00] DataFrames v1.3.5 [38e38edf] GLM v1.8.0 [8b842266] PalmerPenguins v0.1.4 This page was generated using Literate.jl .","title":"Penguins, no AoG"},{"location":"examples/generated/2d/arrows/arrows/","text":"using CairoMakie xs = LinRange ( - 3 , 3 , 20 ) ys = LinRange ( - 3 , 3 , 20 ) us = [ x + y for x in xs , y in ys ] vs = [ y - x for x in xs , y in ys ] strength = vec ( sqrt . ( us .^ 2 .+ vs .^ 2 )) cmap = :gnuplot fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"y\" , aspect = DataAspect ()) arrows! ( ax , xs , ys , us , vs , arrowsize = 10 , lengthscale = 0.1 , arrowcolor = strength , linecolor = strength , colormap = cmap ) Colorbar ( fig [ 1 , 2 ], limits = ( minimum ( strength ), maximum ( strength )), nsteps = 100 , colormap = cmap , ticksize = 15 , width = 15 , tickalign = 1 ) limits! ( ax , - 3 , 3 , - 3 , 3 ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"arrows"},{"location":"examples/generated/2d/band/band/","text":"using CairoMakie , Random x = 0 : 0.05 : 4 \u03c0 y1 = sin . ( 3 x ) ./ ( cos . ( x ) .+ 2 ) ./ x y2 = - 2.5 cos . ( x ) ./ x xl = LinRange ( 5 , 10 , 10 ) yl = LinRange ( 1 , 0.5 , 10 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]) lines! ( x , y1 ; color = :dodgerblue , label = \"blue\" ) band! ( x , y1 .- 0.1 , y1 .+ 0.1 ; color = ( :dodgerblue , 0.2 ), label = \"blue\" ) lines! ( x , y2 ; color = :red , label = \"red\" ) band! ( x , y2 .- 0.1 , y2 .+ 0.1 ; color = ( :red , 0.2 ), label = \"red\" ) lines! ( xl , yl ; color = :slategray1 , label = \"slategray1\" ) band! ( xl , fill ( 0.5 , 10 ), yl ; color = ( :slategray1 , 0.25 ), label = \"slategray1\" ) ylims! ( - 0.55 , 1 ) axislegend ( ax , position = :rt , merge = true ) hidedecorations! ( ax ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Bands: Intervals - Ribbon"},{"location":"examples/generated/2d/band/band_confidence_error/","text":"using CairoMakie x = y = - 10 : 0.11 : 10 y1d = sin . ( x ) ./ x lower = y1d .- 0.1 upper = y1d .+ 0.1 fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"y\" ) lines! ( x , y1d , color = :black ) band! ( x , lower , upper ; color = ( :green , 0.2 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Confidence region"},{"location":"examples/generated/2d/band/band_ribbon/","text":"using CairoMakie x = LinRange ( - 10 , 10 , 200 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"y\" ) band! ( x , sin . ( x ), sin . ( x ) .+ 1 ; color = ( :blue , 0.2 )) band! ( x , cos . ( x ), 1 .+ cos . ( x ); color = ( :red , 0.2 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Band - Ribbon - Between"},{"location":"examples/generated/2d/band/filled_under/","text":"using CairoMakie x = 0 : 0.05 : 1 y = x .^ 2 fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"y\" ) lines! ( x , y , color = :orangered , label = \"Label\" ) band! ( x , fill ( 0 , length ( x )), y ; color = ( :orange , 0.25 ), label = \"Label\" ) axislegend (; merge = true , position = :lt ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Filled under line"},{"location":"examples/generated/2d/band/filled_under_bell/","text":"using CairoMakie \u03bcs = [ 0.25 , 2 , - 1 ] \u03c3s = [ 1.25 , 1 , 2 ] colors = [ \"#E69F00\" , \"#56B4E9\" , \"#009E73\" ] x = LinRange ( - 10 , 10 , 200 ) fg ( x , \u03bc , \u03c3 ) = exp . ( .- ( x .- \u03bc ) .^ 2 ./ ( 2 \u03c3 ^ 2 )) ./ ( \u03c3 * \u221a ( 2 \u03c0 )) fig = Figure ( resolution = ( 600 , 400 ), font = \"CMU Serif\" ) ax = Axis ( fig [ 1 , 1 ], xlabel = L \"x\" , ylabel = L \"y\" , xlabelsize = 22 , ylabelsize = 22 ) for ( idx , \u03bc ) in enumerate ( \u03bcs ) lines! ( x , fg ( x , \u03bc , \u03c3s [ idx ]); color = colors [ idx ], label = L \"\\mu = % $ ( \u03bc ) , \\sigma = % $ ( \u03c3s [ idx ]) \" ) band! ( x , fill ( 0 , length ( x )), fg ( x , \u03bc , \u03c3s [ idx ]); color = ( colors [ idx ], 0.1 ), label = L \"\\mu = % $ ( \u03bc ) , \\sigma = % $ ( \u03c3s [ idx ]) \" ) end axislegend (; merge = true , framecolor = :red ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Filled under bell-shaped curves"},{"location":"examples/generated/2d/bars/barplot_cmap_y_error/","text":"using CairoMakie , Random Random . seed! ( 145 ) x , y , yerr = 1 : 2 : 20 , 5 * rand ( 10 ), 0.4 * abs . ( randn ( 10 )) fig = Figure ( resolution = ( 600 , 400 ), font = \"sans\" ) ax = Axis ( fig [ 1 , 1 ]; xlabel = \"variables\" , ylabel = \"values\" ) barplot! ( ax , x , y ; strokewidth = 1 , color = x , colormap = ( :Spectral_10 , 0.85 ), strokecolor = :black ) errorbars! ( ax , x , y , yerr ; whiskerwidth = 12 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Barplot with colormap & y errorbar"},{"location":"examples/generated/2d/bars/barplot_y_error/","text":"using CairoMakie , Random Random . seed! ( 145 ) x , y , yerr = 1 : 2 : 20 , 5 * rand ( 10 ), 0.4 * abs . ( randn ( 10 )) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"variable\" , ylabel = \"values\" ) barplot! ( ax , x , y ; strokewidth = 1 , color = :transparent , strokecolor = :black ) errorbars! ( ax , x , y , yerr ; whiskerwidth = 12 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Barplot & y errorbar"},{"location":"examples/generated/2d/bars/stripped_bars/","text":"# This currently fails with CairoMakie # https://discourse.julialang.org/t/striped-colors-for-e-g-bar-plots-in-julia/64435/3 using GLMakie . Makie , GLMakie , Random GLMakie . activate! () Random . seed! ( 13 ) # patterns # `'/'`, `'\\\\'`, `'-'`, `'|'`, `'x'`, and `'+'` directions = [ Vec2f ( 1 ), Vec2f ( 1 , - 1 ), Vec2f ( 1 , 0 ), Vec2f ( 0 , 1 ), [ Vec2f ( 1 ), Vec2f ( 1 , - 1 )], [ Vec2f ( 1 , 0 ), Vec2f ( 0 , 1 )]] colors = [ :white , :orange , ( :green , 0.5 ), :yellow , ( :blue , 0.85 ), :black ] patternColors = [ Makie . LinePattern ( direction = hatch ; width = 5 , tilesize = ( 20 , 20 ), linecolor = colors [ indx ], background_color = colors [ end - indx + 1 ]) for ( indx , hatch ) in enumerate ( directions )] fig , ax , pltobj = barplot ( 1 : 2 , strokewidth = 2 , color = [ \"grey\" , \"orange\" ], figure = ( resolution = ( 1200 , 800 ), fontsize = 32 )) for ( idx , pattern ) in enumerate ( patternColors ) barplot! ( ax , [ idx + 2 ], [ idx * ( 2 rand () + 1 )], color = pattern , strokewidth = 2 ) end ax . xticks = ( 1 : 8 , [ \"grey\" , \"orange\" , \"/\" , \" \\\\ \" , \"-\" , \"|\" , \"x\" , \"+\" ]) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Stripped barplots"},{"location":"examples/generated/2d/bars/x_barplot_error_y_error/","text":"using CairoMakie , Random Random . seed! ( 145 ) x , y = 1 : 2 : 20 , 5 * rand ( 10 ) yerr , xerr = 0.4 * abs . ( randn ( 10 )), abs . ( randn ( 10 )) fig = Figure ( resolution = ( 600 , 400 ), font = \"sans\" ) ax = Axis ( fig [ 1 , 1 ], xlabel = \"variables\" , ylabel = \"values\" ) barplot! ( ax , x , y ; width = 1.8 xerr , strokewidth = 1 , color = :transparent , strokecolor = :black ) errorbars! ( ax , x , y , yerr ; whiskerwidth = 12 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"x - Barplot error & y errorbar"},{"location":"examples/generated/2d/boxplots/airquality/","text":"using CairoMakie , RDatasets , Colors , ColorSchemes airquality = dataset ( \"datasets\" , \"airquality\" ) categories = [ \"Ozone\" , \"Solar.R\" , \"Wind\" , \"Temp\" ] colors = categorical_colors ( :Set1 , length ( categories )) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xticks = ( 1 : length ( categories ), categories )) for ( indx , f ) in enumerate ( categories ) datam = filter ( x -> x !== missing , airquality [ : , f ]) a = fill ( indx , length ( datam )) boxplot! ( ax , a , datam ; whiskerwidth = 1 , width = 0.35 , color = ( colors [ indx ], 0.45 ), whiskercolor = ( colors [ indx ], 1 ), mediancolor = :black ) end fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"RDatasets\" , \"Colors\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 [5ae59095] Colors v0.12.8 [ce6b1742] RDatasets v0.7.7 This page was generated using Literate.jl .","title":"Boxes: airquality"},{"location":"examples/generated/2d/boxplots/boxplots_collection/","text":"using CairoMakie , Random , Distributions Random . seed! ( 13 ) n = 3000 colors = resample_cmap ( :spring , 8 )[ 3 : end ] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; palette = (; patchcolor = colors ), xticks = ( 1 : 7 , [ \"cat 1\" , \"A\" , \"B\" , \"C\" , \"D\" , \"E\" , \"F\" ]), yticks = ([ - 5 ], [ \"cat 2\" ]), yticklabelrotation = \u03c0 / 2 ) boxplot! ( ax , fill ( - 5 , n ), rand ( Normal ( 0 , 0.5 ), n ); orientation = :horizontal , whiskerwidth = 1 , width = 2 , color = ( :orange , 0.95 ), whiskercolor = :red , mediancolor = :yellow , markersize = 8 , strokecolor = :black , strokewidth = 1 , label = \"horizontal\" ) boxplot! ( ax , fill ( 1 , n ), rand ( Normal ( 1 , 3 ), n ); whiskerwidth = 1 , width = 0.5 , color = :dodgerblue , whiskercolor = :dodgerblue , mediancolor = :grey20 , markersize = 5 , strokecolor = :grey20 , strokewidth = 1 , label = \"vertical\" ) for i in 2 : 7 boxplot! ( ax , fill ( i , n ), rand ( Normal ( rand ( - 2 : 5 ), 2 * rand () + 0.3 ), n ); whiskerwidth = 1 , width = 0.35 ) end axislegend ( ax , position = :lt ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"Distributions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [31c24e10] Distributions v0.25.70 This page was generated using Literate.jl .","title":"Boxplots collection"},{"location":"examples/generated/2d/boxplots/vertical_horizontal/","text":"using CairoMakie , Random Random . seed! ( 13 ) n = 3000 data = randn ( n ) a = fill ( 1 , n ) fig = Figure ( resolution = ( 600 , 400 )) ax1 = Axis ( fig [ 1 , 1 ], xlabel = \"variable\" , ylabel = \"values\" , xticks = ([ 1 ], [ \"normal Distribution\" ])) ax2 = Axis ( fig [ 1 , 2 ], xlabel = \"values\" , ylabel = \"variable\" , yticks = ([ 1 ], [ \"normal Distribution\" ]), yticklabelrotation = pi / 2 ) boxplot! ( ax1 , a , data ; whiskerwidth = 1 , width = 0.35 , color = ( :red , 0.45 ), whiskercolor = ( :red , 1 ), mediancolor = :red , markersize = 8 , strokecolor = :black , strokewidth = 1 , label = \"vertical\" ) limits! ( ax1 , 0 , 2 , - 5 , 5 ) boxplot! ( ax2 , a , data ; orientation = :horizontal , whiskerwidth = 1 , width = 0.35 , color = ( :navy , 0.45 ), whiskercolor = ( :navy , 1 ), mediancolor = :navy , markersize = 8 , strokecolor = :black , strokewidth = 1 , label = \"horizontal\" ) limits! ( ax2 , - 5 , 5 , 0 , 2 ) axislegend ( ax1 , position = :rb , framecolor = :transparent ) axislegend ( ax2 , position = :rt , bgcolor = ( :dodgerblue , 0.2 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Vertical / Horizontal"},{"location":"examples/generated/2d/contour/complex_function/","text":"using CairoMakie x = - 2 : 0.005 : 2 y = - 2 : 0.005 : 2 f ( z ) = ( z ^ 3 - 3 ) / z fvals = [ f ( u + 1 im * v ) for u in x , v in y ] fvalues = abs . ( fvals ) fargs = angle . ( fvals ) fig = Figure ( resolution = ( 900 , 400 ), fontsize = 20 ) axs = [ Axis ( fig [ 1 , j ], aspect = 1 ) for j in 1 : 2 ] cmap = :roma contour! ( axs [ 1 ], x , y , fargs , levels = 30 , colormap = cmap ) pltobj1 = heatmap! ( axs [ 2 ], x , y , fargs , colorrange = ( - \u03c0 , \u03c0 ), colormap = cmap ) contour! ( axs [ 2 ], x , y , fargs , levels = 30 , color = :white , linewidth = 0.85 ) Colorbar ( fig [ 1 , 3 ], pltobj1 , ticks = ([ - \u03c0 , - \u03c0 / 2 , 0 , \u03c0 / 2 , \u03c0 ], [ \"-\u03c0\" , \"-\u03c0/2\" , \"0\" , \"\u03c0/2\" , \"\u03c0\" ])) limits! ( axs [ 1 ], - 2 , 2 , - 2 , 2 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Complex function"},{"location":"examples/generated/2d/contour/contour_over_heatmap/","text":"using CairoMakie f ( x , y ) = ( x + 2 y ^ 2 ) * abs ( sin ( y ) + cos ( x )) x = y = 1 : 0.2 : 20 z = [ f ( x , y ) for x in x , y in y ] fig = Figure ( resolution = ( 1200 , 400 ), fontsize = 22 ) axs = [ Axis ( fig [ 1 , j ], aspect = 1 , xlabel = \"x\" , ylabel = j == 1 ? \"y\" : \"\" ) for j in 1 : 3 ] p1 = heatmap! ( axs [ 1 ], x , y , z , colormap = :plasma ) contour! ( axs [ 2 ], x , y , z ; color = :black , levels = 100 : 1 : 101 ) heatmap! ( axs [ 3 ], x , y , z ; colormap = ( :plasma , 0.5 )) contour! ( axs [ 3 ], x , y , z ; color = :white , levels = 100 : 1 : 101 ) Colorbar ( fig [ 1 , 4 ], p1 , width = 20 , ticksize = 20 , tickalign = 1 ) [ limits! ( axs [ i ], 1 , 20 , 1 , 20 ) for i in 1 : 3 ] [ hideydecorations! ( axs [ i ], grid = false , ticks = false ) for i in 2 : 3 ] fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Contour over heatmap"},{"location":"examples/generated/2d/contour/egg_shape/","text":"using CairoMakie , Random x = - 1 : 0.02 : 1 y = - 1.5 : 0.02 : 2 egg ( x , y ) = x ^ 2 + y ^ 2 / ( 1.4 + y / 5 ) ^ 2 segg = [ egg ( x , y ) for x in x , y in y ] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], aspect = DataAspect (), xlabel = \"x\" , ylabel = \"y\" , xgridstyle = :dash , ygridstyle = :dash , xgridcolor = :grey , ygridcolor = :grey ) cl = contour! ( x , y , segg ; linewidth = 0.85 , colormap = :Spectral_11 , levels = 0 : 0.02 : 1 ) # colsize!(fig.layout, 1, Aspect(1, 0.6)) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Egg shape"},{"location":"examples/generated/2d/contour/qubit/","text":"using CairoMakie function t\u03b1_qubit ( \u03b2 , \u03c81 , \u03c82 , f\u03b1 , f ) 2 + 2 * \u03b2 - cos ( \u03c81 ) - cos ( \u03c82 ) - 2 * \u03b2 * cos ( \u03c0 * f\u03b1 ) * cos ( 2 * \u03c0 * f + \u03c0 * f\u03b1 - \u03c81 - \u03c82 ) end \u03c81 = \u03c82 = range ( 0 , 4 * \u03c0 , length = 100 ) z = [ t\u03b1_qubit ( 0.61 , x , y , 0.2 , 0.1 ) for x in \u03c81 , y in \u03c82 ] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], aspect = 1 , xlabel = \"\u03c81\" , ylabel = \"\u03c82\" ) cls = contour! ( \u03c81 , \u03c82 , z ; colormap = :plasma , levels = 20 , linewidth = 1.5 ) # Colorbar(fig[1, 2], cls, label=\"\u03b1-q\") limits! ( ax , 0 , 4 \u03c0 , 0 , 4 \u03c0 ) # colsize!(fig.layout, 1, Aspect(1, 1.0)) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Qubit"},{"location":"examples/generated/2d/contour3d/contour_v/","text":"using GLMakie , ColorSchemes GLMakie . activate! () x = y = z = 1 : 10 f ( x , y , z ) = x ^ 2 + y ^ 2 + z ^ 2 vol = [ f ( ix , iy , iz ) for ix in x , iy in y , iz in z ] fig , ax , _ = contour ( x , y , z , vol ; #colorrange = (minimum(vol), maximum(vol)), levels = 10 , colormap = :Egypt , transparency = true , figure = (; resolution = ( 1200 , 800 )), axis = (; type = Axis3 , perspectiveness = 0.5 , azimuth = 2.19 , elevation = 0.57 , aspect = ( 1 , 1 , 1 ) ) ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [35d6a980] ColorSchemes v3.19.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"contour: volume-like"},{"location":"examples/generated/2d/contour3d/contourf_contour3d/","text":"using GLMakie GLMakie . activate! () function peaks (; n = 49 ) x = LinRange ( - 3 , 3 , n ) y = LinRange ( - 3 , 3 , n ) a = 3 * ( 1 .- x ' ) .^ 2 .* exp . ( - ( x '.^ 2 ) .- ( y .+ 1 ) .^ 2 ) b = 10 * ( x ' / 5 .- x '.^ 3 .- y .^ 5 ) .* exp . ( - x '.^ 2 .- y .^ 2 ) c = 1 / 3 * exp . ( - ( x ' .+ 1 ) .^ 2 .- y .^ 2 ) return ( x , y , a .- b .- c ) end x , y , z = peaks () with_theme ( theme_dark ()) do fig = Figure ( resolution = ( 1200 , 800 )) ax1 = Axis ( fig [ 1 , 1 ], aspect = 1 ) ax2 = Axis3 ( fig [ 1 , 2 ]; aspect = ( 1 , 1 , 0.7 ), perspectiveness = 0.5 ) axs = [ ax1 , ax2 ] cmap = :diverging_bkr_55_10_c35_n256 contourf! ( axs [ 1 ], x , y , z ; levels = 0.1 : 0.08 : 0.9 , mode = :relative , colormap = cmap ) # bug, colormap cannot be transparent contourf! ( axs [ 2 ], x , y , z ; levels = 14 , colormap = cmap ) contour3d! ( axs [ 2 ], x , y , z ; levels = 14 , colormap = cmap , transparency = true , linewidth = 5 ) limits! ( axs [ 1 ], - 3 , 3 , - 3 , 3 ) hidedecorations! . ( axs ; grid = false ) fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"contourf & contour3d"},{"location":"examples/generated/2d/dashboards/colorshemes/","text":"using GLMakie , ColorSchemes , Random GLMakie . activate! () function plotVolColormaps (; rseed = 123 ) Random . seed! ( rseed ) # all colormaps from colorschemes cs = collect ( keys ( colorschemes )) cmapIdx = Observable ( 1 ) cmap = @lift ( cs [ $ cmapIdx ]) # the actual figure x = y = z = - 1.7 : 0.05 : 1.7 r ( i , j , k ) = sqrt ( i ^ 2 + j ^ 2 + k ^ 2 ) A = [ rand () / r ( i , j , k ) ^ 2 for i in x , j in y , k in z ] fig = Figure ( resolution = ( 1200 , 800 )) ax = Axis3 ( fig [ 1 , 1 ]; aspect = ( 1 , 1 , 1 ), perspectiveness = 0.5 , elevation = \u03c0 / 9 ) volume! ( ax , x , y , z , A ; colormap = cmap , transparency = true ) sl = Slider ( fig [ 1 , 2 ], range = 1 : length ( cs ), startvalue = 40 , horizontal = false ) connect! ( cmapIdx , sl . value ) fig [ 0 , 1 ] = Label ( fig , @lift ( \"Colormap: $ ( cs [ $ cmapIdx ]) \" ), textsize = 20 , tellheight = true , tellwidth = false ) fig end fig = with_theme ( plotVolColormaps , theme_dark ()) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [35d6a980] ColorSchemes v3.19.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Slider"},{"location":"examples/generated/2d/dashboards/matcap/","text":"using GLMakie using FileIO , Downloads , JSON using Makie . GeometryBasics : Pyramid using GeometryBasics using Colors , LinearAlgebra GLMakie . activate! () pyr = Pyramid ( Point3f ( 0 ), 1.0f0 , 1.0f0 ) rectmesh = Rect3 ( Point3f ( - 0.5 ), Vec3f ( 1 )) sphere = Sphere ( Point3f ( - 0.5 ), 1 ) Cone (; quality = 10 ) = merge ([ Makie . _circle ( Point3f ( 0 ), 0.5f0 , Vec3f ( 0 , 0 , - 1 ), quality ), Makie . _mantle ( Point3f ( 0 ), Point3f ( 0 , 0 , 1 ), 0.5f0 , 0.0f0 , quality )]) cone = Cone () brain = load ( assetpath ( \"brain.stl\" )) matball = load ( assetpath ( \"matball_base.obj\" )) matball_inner = load ( assetpath ( \"matball_inner.obj\" )) matball_outer = load ( assetpath ( \"matball_outer.obj\" )) # download more ids from here: # https://raw.githubusercontent.com/MakieOrg/BeautifulMakie/main/data/ #ids = JSON.parsefile(\"matcapIds.json\") ids = [ \"F79686_FCCBD4_E76644_E76B56\" , \"F9E6C7_FCF7DF_EDD3AA_F1D4B4\" , \"FBB43F_FBE993_FB552E_FCDD65\" , \"FBB82D_FBEDBF_FBDE7D_FB7E05\" ] function plotmat () idx = Observable ( 1 ) idpng = @lift ( ids [ $ idx ]) matcap = @lift ( load ( Downloads . download ( \"https://raw.githubusercontent.com/nidorx/matcaps/master/1024/ $ ( $ idpng ) .png\" ))) ambient = Vec3f ( 0.8 , 0.8 , 0.8 ) shading = true fig = Figure ( resolution = ( 1200 , 900 )) axs = [ LScene ( fig [ i , j ]; show_axis = false ) for j in 1 : 3 , i in 1 : 2 ] mesh! ( axs [ 5 ], sphere ; matcap , shading , ambient ) mesh! ( axs [ 3 ], rectmesh ; matcap , shading , ambient , transparency = true ) mesh! ( axs [ 4 ], pyr ; matcap , shading , ambient ) mesh! ( axs [ 2 ], matball ; matcap , shading , ambient ) mesh! ( axs [ 2 ], matball_inner ; matcap , shading , ambient ) mesh! ( axs [ 2 ], matball_outer ; matcap , shading , ambient ) mesh! ( axs [ 6 ], cone ; matcap , shading , ambient ) mesh! ( axs [ 1 ], brain ; matcap , shading , ambient ) GLMakie . rotate! ( axs [ 2 ] . scene , 2.35 ) center! ( axs [ 2 ] . scene ) zoom! ( axs [ 2 ] . scene , cameracontrols ( axs [ 2 ] . scene ), 0.75 ) zoom! ( axs [ 3 ] . scene , cameracontrols ( axs [ 3 ] . scene ), 1.2 ) zoom! ( axs [ 4 ] . scene , cameracontrols ( axs [ 4 ] . scene ), 1.2 ) sl = Slider ( fig [ 1 : 2 , 4 ], range = 1 : length ( ids ), startvalue = 2 , horizontal = false ) connect! ( idx , sl . value ) fig [ 0 , 1 : 3 ] = Label ( fig , @lift ( \"idnum [ $ ( 1 *$ idx ) ] png material : $ ( ids [ $ idx ]) \" ), textsize = 20 , tellheight = true , tellwidth = false ) fig end fig = with_theme ( plotmat , theme_dark ()) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"Colors\" , \"GeometryBasics\" , \"LinearAlgebra\" , \"Downloads\" , \"FileIO\" , \"JSON\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5ae59095] Colors v0.12.8 [5789e2e9] FileIO v1.15.0 [e9467ef8] GLMakie v0.6.13 \u2303 [5c1252a2] GeometryBasics v0.4.2 [682c06a0] JSON v0.21.3 [37e2e46d] LinearAlgebra Info Packages marked with \u2303 have new versions available This page was generated using Literate.jl .","title":"Material Capture: matcap"},{"location":"examples/generated/2d/dashboards/tesseral_spherical_harmonics/","text":"using GLMakie , ColorSchemes using AssociatedLegendrePolynomials GLMakie . activate! () function Y ( \u03b8 , \u03d5 , l , m ) if m < 0 return ( - 1 ) ^ m * \u221a 2 * Nlm ( l , abs ( m )) * Plm ( l , abs ( m ), cos ( \u03b8 )) * sin ( abs ( m ) * \u03d5 ) elseif m == 0 return sqrt (( 2 * l + 1 ) / 4 \u03c0 ) * Plm ( l , m , cos ( \u03b8 )) else return ( - 1 ) ^ m * \u221a 2 * Nlm ( l , m ) * Plm ( l , m , cos ( \u03b8 )) * cos ( m * \u03d5 ) end end # Grids of polar and azimuthal angles \u03b8 = LinRange ( 0 , \u03c0 , 200 ) \u03d5 = LinRange ( 0 , 2 \u03c0 , 200 ) x = [ sin ( \u03b8 ) * sin ( \u03d5 ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] y = [ sin ( \u03b8 ) * cos ( \u03d5 ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] z = [ cos ( \u03b8 ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] l = Observable ( 4 ) m = Observable ( 1 ) cmap = \"Hiroshige\" with_theme ( theme_dark ()) do fig = Figure ( resolution = ( 1200 , 800 )) menu = Menu ( fig , options = [ \"Hiroshige\" , \"Spectral_11\" , \"diverging_bkr_55_10_c35_n256\" , \"diverging_cwm_80_100_c22_n256\" , \":diverging_gkr_60_10_c40_n256\" , \"diverging_linear_bjr_30_55_c53_n256\" , \"diverging_protanopic_deuteranopic_bwy_60_95_c32_n256\" ]) Ygrid = lift ( l , m ) do l , m [ Y ( \u03b8 , \u03d5 , l , m ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] end Ylm = @lift ( abs . ( $ Ygrid )) Ygrid2 = @lift ( vec ( $ Ygrid )) ax1 = Axis3 ( fig [ 1 , 1 ], aspect = :data , perspectiveness = 0.5 , elevation = \u03c0 / 8 , azimuth = 2.225 \u03c0 ) ax2 = Axis3 ( fig [ 1 , 2 ], aspect = :data , perspectiveness = 0.5 , elevation = \u03c0 / 8 , azimuth = 2.225 \u03c0 ) pltobj1 = surface! ( ax1 , x , y , z ; color = Ygrid , colormap = cmap , shading = false ) pltobj2 = surface! ( ax2 , @lift ( $ Ylm .* x ), @lift ( $ Ylm .* y ), @lift ( $ Ylm .* z ), color = Ygrid , colormap = cmap , shading = false ) limits! ( ax2 , - 0.5 , 0.5 , - 0.5 , 0.5 , - 1 , 1 ) # cbar = Colorbar(fig[1, 3], pltobj1, label = \"Y\u2097\u2098(\u03b8,\u03d5)\", width = 11, tickalign = 1, tickwidth = 1) fig [ 0 , 1 : 2 ] = Label ( fig , @lift ( \"Tesseral Spherical Harmonics l = $ ( $ l ) , m = $ ( $ m ) \" ), textsize = 20 ) fig [ 1 , 0 ] = vgrid! ( Label ( fig , \"Colormap\" , width = nothing ), menu ; tellheight = false , width = 150 ) on ( menu . selection ) do s pltobj1 . colormap = s pltobj2 . colormap = s end sl = Slider ( fig [ end + 1 , 1 : 2 ], range = 1 : 30 , startvalue = 2 ) sl2 = Slider ( fig [ end + 1 , 1 : 2 ], range = @lift ( -$ ( sl . value ) : 1 :$ ( sl . value ))) connect! ( l , sl . value ) connect! ( m , sl2 . value ) # tight_ticklabel_spacing!(cbar) # display(fig) end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"ColorSchemes\" , \"AssociatedLegendrePolynomials\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [2119f1ac] AssociatedLegendrePolynomials v1.0.0 [35d6a980] ColorSchemes v3.19.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Menu and Sliders"},{"location":"examples/generated/2d/density/density/","text":"using CairoMakie , Distributions , Random Random . seed! ( 124 ) colors = [ \"#FF410D\" , \"#6EE2FF\" , \"#F7C530\" , \"#95CC5E\" , \"#D0DFE6\" , \"#F79D1E\" ] \u03bc\u03c3pairs = [[ 2 , 0.5 ], [ - 1 , 2 ], [ 0.25 , 1 ], [ 1 , 0.1 ], [ 1 , 0.05 ], [ 1.2 , 0.1 ]] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; palette = (; patchcolor = tuple . ( colors , 0.45 ))) for ( idx , \u03bc\u03c3 ) in enumerate ( \u03bc\u03c3pairs ) density! ( rand ( Normal ( \u03bc\u03c3 ... ), 1000 ), strokewidth = 1.5 , strokecolor = :grey20 , direction = idx > 3 ? :x : :y , linestyle = idx > 3 ? :dash : nothing , label = \" $ ( \u03bc\u03c3 [ 1 ]) , $ ( \u03bc\u03c3 [ 2 ]) \" ) end axislegend ( L \"\\mu,\\quad\\sigma\" ; position = :cb , titlesize = 22 ) hidedecorations! ( ax ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"Distributions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [31c24e10] Distributions v0.25.70 This page was generated using Literate.jl .","title":"Distributions"},{"location":"examples/generated/2d/density/mtcars_density/","text":"using CairoMakie , RDatasets , Colors , ColorSchemes cars = dataset ( \"datasets\" , \"mtcars\" ) byCat = cars . Cyl categ = unique ( byCat ) colors1 = categorical_colors ( :Hiroshige , length ( categ )) colors2 = categorical_colors ( :gnuplot , length ( categ )) fig = Figure ( resolution = ( 600 , 800 )) ax1 = Axis ( fig [ 2 , 1 ], xlabel = \"MPG\" , ylabel = \"density\" , xgridstyle = :dash , ygridstyle = :dash , rightspinevisible = false , topspinevisible = false ) ax2 = Axis ( fig [ 3 , 1 ], xlabel = \"MPG\" , ylabel = \"density\" ) for ( i , c ) in enumerate ( categ ) indc = findall ( x -> x == c , byCat ) density! ( ax1 , cars . MPG [ indc ]; color = ( colors1 [ i ], 0.5 ), label = \" $ ( c ) \" , strokewidth = 1.25 , strokecolor = colors1 [ i ]) density! ( ax2 , cars . MPG [ indc ], color = ( colors2 [ i ], 0.5 ), label = \" $ ( c ) \" , strokewidth = 1.25 , strokecolor = colors2 [ i ]) end Legend ( fig [ 1 , 1 ], ax1 , \"Cyl\" , orientation = :horizontal , tellheight = true , tellwidth = false , framevisible = false , titleposition = :left ) Legend ( fig [ 3 , 2 ], ax2 , \"Cyl\" ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"RDatasets\" , \"Colors\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 [5ae59095] Colors v0.12.8 [ce6b1742] RDatasets v0.7.7 This page was generated using Literate.jl .","title":"RDatasets: mtcars"},{"location":"examples/generated/2d/errorbars/errorbars/","text":"using CairoMakie , Random Random . seed! ( 145 ) n = 50 x = 1 : n y = sin . ( x ) .+ randn ( n ) / 10 yerr = 0.2 * abs . ( randn ( n )) xerr = abs . ( randn ( n )) fig , ax , = errorbars ( x , y , yerr ; color = 1 : n , colormap = ([ :black , :orangered ]), whiskerwidth = 10 , linewidth = 1.5 , figure = (; resolution = ( 600 , 400 ))) errorbars! ( x , y , xerr ; color = 1 : n , colormap = ([ :orangered , :black ]), direction = :x , linewidth = 1.5 , whiskerwidth = 10 ) scatter! ( x , y ; markersize = 10 , color = ( :black , 0.25 ), strokewidth = 1 , strokecolor = :black ) lines! ( x , y ; linewidth = 0.5 , linestyle = :dashdot ) hidedecorations! ( ax ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Errorbars formation"},{"location":"examples/generated/2d/errorbars/simple_x_y/","text":"using CairoMakie , Random Random . seed! ( 145 ) x , y = 1 : 2 : 20 , 5 * rand ( 10 ) yerr , xerr = 0.4 * abs . ( randn ( 10 )), abs . ( randn ( 10 )) fig = Figure ( resolution = ( 600 , 400 ), font = \"sans\" ) ax = Axis ( fig [ 1 , 1 ]; xlabel = \"variable\" , ylabel = \"values\" ) errorbars! ( ax , x , y , yerr ; whiskerwidth = 12 , color = :orangered ) errorbars! ( ax , x , y , xerr ; whiskerwidth = 12 , direction = :x ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Simple x-y errorbars"},{"location":"examples/generated/2d/errorbars/y_colormap/","text":"using CairoMakie , Random Random . seed! ( 145 ) x , y = 1 : 2 : 20 , 5 * rand ( 10 ) yerr , xerr = 0.4 * abs . ( randn ( 10 )), abs . ( randn ( 10 )) fig = Figure ( resolution = ( 600 , 400 ), font = \"sans\" ) ax = Axis ( fig [ 1 , 1 ], xlabel = \"variable\" , ylabel = \"values\" , xgridstyle = :dash , ygridstyle = :dash ) errorbars! ( ax , x , y , yerr ; whiskerwidth = 12 , color = yerr , linewidth = 2 , colormap = :viridis ) scatter! ( ax , x , y ; color = yerr , colormap = :viridis , markersize = 15 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"y errorbar with colormap"},{"location":"examples/generated/2d/fun/astronauts/","text":"using CairoMakie , HTTP , CSV , DataFrames , DataFramesMeta , Suppressor using Images , ColorSchemes , Colors , Statistics using Lazy : @> CairoMakie . activate! ( type = \"png\" ) function plotastro () data_url = \"https://bit.ly/3kmlGn2\" @suppress begin global astronauts astronauts = CSV . File ( HTTP . download ( data_url )) |> DataFrame end offhr , rPts , \u03b1 = 3.5 , 45 , 35 astro = @> begin astronauts @orderby ( :year_of_mission ) @subset ( :total_eva_hrs .> 0.0 ) @transform ( :ntotEVA = :total_eva_hrs / maximum ( :total_eva_hrs )) @transform ( :\u03b8 = LinRange ( 0 , 2 \u03c0 - 2 \u03c0 / length ( :name ), length ( :name ))) @transform ( :align = tuple . ( ifelse . ( \u03c0 / 2 .< :\u03b8 .< 3 \u03c0 / 2 , ^ ( :right ), ^ ( :left )), ^ ( :center ))) @transform ( :texttheta = ifelse . ( \u03c0 / 2 .< :\u03b8 .< 3 \u03c0 / 2 , :\u03b8 .+ \u03c0 , :\u03b8 )) @transform ( :evaM = log10 . (( 60 * :eva_hrs_mission / median ( 60 * :eva_hrs_mission )) .+ offhr )) @transform ( :xM = rPts * :evaM .* cos . ( :\u03b8 ), :yM = rPts * :evaM .* sin . ( :\u03b8 )) @transform ( :xMnm = rPts * ( :evaM .- :total_number_of_missions .* :evaM ./ \u03b1 ) .* cos . ( :\u03b8 )) @transform ( :yMnm = rPts * ( :evaM .- :total_number_of_missions .* :evaM ./ \u03b1 ) .* sin . ( :\u03b8 )) end valYear = @> begin astro @subset ([ true ; :year_of_mission [ 2 : end ] .!= :year_of_mission [ 1 : end - 1 ]]) end vehicles = @> begin astro @subset ([ true ; :ascend_shuttle [ 2 : end ] .!= :ascend_shuttle [ 1 : end - 1 ]]) end tierra = \"https://climate.nasa.gov/system/internal_resources/details/original/309_ImageWall5_768px-60.jpg\" @suppress begin global imgEarth tierra = HTTP . download ( tierra ) imgEarth = load ( tierra ) end function getPoints ( xi , yi , xf , yf ) xyos = [] for i in 1 : length ( xo ) push! ( xyos , [ xi [ i ], yi [ i ]]) push! ( xyos , [ xf [ i ], yf [ i ]]) end xyos end x , y = astro . xM , astro . yM # end points xs , ys = astro . xMnm , astro . yMnm # short lines starts xo = yo = zeros ( length ( x )) # origin xnb , ynb = 90 * cos . ( astro . \u03b8 ), 90 * sin . ( astro . \u03b8 ) xne , yne = 100 * cos . ( astro . \u03b8 ), 100 * sin . ( astro . \u03b8 ) ps , colorp = 0.5 .+ 3 astro . ntotEVA , astro . total_eva_hrs # point size, color palette gridLines = LinRange ( log10 ( offhr ), maximum ( astro . evaM ), 6 ) horas = ( 10 .^ gridLines .- offhr ) * median ( 60 * astro . eva_hrs_mission ) / 60 xg = [ rPts * gl .* cos . ( astro . \u03b8 ) for gl in gridLines ] yg = [ rPts * gl .* sin . ( astro . \u03b8 ) for gl in gridLines ] # in order to use linesegments (faster to plot) xyos = getPoints ( xo , yo , xs , ys ) xys = getPoints ( xs , ys , x , y ) xybe = getPoints ( xnb , ynb , xne , yne ) cpDo = repeat ( colorp , inner = 2 ) psDo = repeat ( ps , inner = 2 ) with_theme ( theme_black ()) do fig = Figure ( resolution = ( 1200 , 1200 )) cmap = :rainbow2 ax = CairoMakie . Axis ( fig [ 1 , 1 ], title = \"ASTRONAUTS' EXTRAVEHICULAR ACTIVITIES\" , autolimitaspect = 1 ) hidespines! ( ax ) hidedecorations! ( ax ) image! ( - 20 .. 20 , - 17 .. 17 , rotr90 ( imgEarth )) text! ( astro . name , position = @. ( Point2f ( cos ( astro . \u03b8 ), sin ( astro . \u03b8 )) * 85 ), rotation = astro . texttheta , textsize = 6 , align = astro . align ) text! ( string . ( valYear . year_of_mission ), position = @. ( Point2f ( cos ( valYear . \u03b8 ), sin ( valYear . \u03b8 )) * 65 ), rotation = valYear . texttheta , textsize = 10 , align = valYear . align ) text! ( vehicles . ascend_shuttle , position = @. ( Point2f ( cos ( vehicles . \u03b8 ), sin ( vehicles . \u03b8 )) * 73 ), rotation = vehicles . texttheta , textsize = 6 , align = vehicles . align ) pltobj = scatter! ( ax , astro [ : , :xM ], astro [ : , :yM ], color = colorp , colormap = cmap , markersize = 3 * ps , strokewidth = 0 ) linesegments! ( Point2f . ( xyos ), color = cpDo , linewidth = psDo / 2 , colormap = ( cmap , 0.15 )) linesegments! ( Point2f . ( xys ), color = cpDo , linewidth = psDo / 2 , colormap = cmap ) linesegments! ( Point2f . ( xybe ), color = cpDo , linewidth = psDo / 3 , colormap = ( cmap , 0.5 )) Colorbar ( fig [ 1 , 1 ], pltobj , label = \"Total duration of all extravehicular activities in hours\" , tellheight = false , tellwidth = false , ticklabelsize = 12 , flipaxis = true , vertical = false , ticksize = 15 , tickalign = 1 , width = Relative ( 1.5 / 4 ), halign = :right , valign = :bottom , labelsize = 12 ) for ( indx , gl ) in enumerate ( gridLines ) xg , yg = rPts * gl .* cos . ( astro . \u03b8 ), rPts * gl .* sin . ( astro . \u03b8 ) hrs = Int64 ( round ( horas [ indx ], digits = 0 )) lines! ( xg , yg , linewidth = 0.5 , linestyle = :dash , color = :white ) text! ( string . ( hrs ), position = ( xg [ 1 ] + 0.5 , y [ 1 ] + 0.5 ), color = \"#FFDD33\" , textsize = 14 ) end lines! ([ rPts * gridLines [ 1 ], rPts * gridLines [ end ]], [ 0 , 0 ], linestyle = :dash , linewidth = 2 , color = \"#FFDD33\" ) text! ( \"evaM (hrs)\" , position = ( 47 , - 3.5 ), color = \"#FFDD33\" , textsize = 16 ) text! ( \"evaM \u2261 Duration of extravehicular \\n activities during the mission in hours\" , position = ( rPts * gridLines [ end - 2 ], 90 ), color = \"#FFDD33\" , textsize = 16 ) text! ( \"using Makie\" , position = ( - 99 , - 94 ), textsize = 18 , color = :white ) text! ( \"Visualization by @LazarusAlon and Julius Krumbiegel \" , position = ( - 99 , - 97 ), textsize = 12 , color = \"#61AFEF\" ) text! ( \"Data - Astronaut Database - Mariya Stavnichuk and Tatsuya Corlett\" , position = ( - 99 , - 99 ), textsize = 10 ) limits! ( ax , - 100 , 100 , - 100 , 100 ) end end plotastro () Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"Distributions\" , \"HTTP\" , \"CSV\" , \"DataFrames\" , \"DataFramesMeta\" , \"Suppressor\" , \"Images\" , \"ColorSchemes\" , \"Colors\" , \"Statistics\" , \"Lazy\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [336ed68f] CSV v0.10.4 [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 [5ae59095] Colors v0.12.8 [a93c6f00] DataFrames v1.3.5 [1313f7d8] DataFramesMeta v0.12.0 [31c24e10] Distributions v0.25.70 [cd3eb016] HTTP v1.3.3 [916415d5] Images v0.25.2 [50d2b5c4] Lazy v0.15.1 [fd094767] Suppressor v0.2.1 [10745b16] Statistics This page was generated using Literate.jl .","title":"Astronauts"},{"location":"examples/generated/2d/fun/earthquakes/","text":"using CSV , DataFrames using GLMakie , Colors , ColorSchemes using FileIO , Downloads GLMakie . activate! () # Original reference: https://glowy-earthquakes.glitch.me urlimg = \"https://upload.wikimedia.org/wikipedia/commons/9/96/NASA_bathymetric_world_map.jpg\" earth_img = load ( Downloads . download ( urlimg )) function sphere (; r = 1.0 , n = 32 ) \u03b8 = LinRange ( 0 , \u03c0 , n ) \u03c6 = LinRange ( - \u03c0 , \u03c0 , 2 * n ) x = [ r * cos ( \u03c6 ) * sin ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] y = [ r * sin ( \u03c6 ) * sin ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] z = [ r * cos ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] return ( x , y , z ) end # https://earthquake.usgs.gov/earthquakes/map/?extent=-68.39918,-248.90625&extent=72.60712,110.74219 urldata = \"https://raw.githubusercontent.com/MakieOrg/BeautifulMakie/main/data/\" file1 = Downloads . download ( urldata * \"2021_01_2021_05.csv\" ) file2 = Downloads . download ( urldata * \"2021_06_2022_01.csv\" ) earthquakes1 = CSV . read ( file1 , DataFrame ) earthquakes2 = CSV . read ( file2 , DataFrame ) earthquakes = vcat ( earthquakes1 , earthquakes2 ) # depth unit, km function toCartesian ( lon , lat ; r = 1.02 , cxyz = ( 0 , 0 , 0 )) x = cxyz [ 1 ] + ( r + 1500_000 ) * cosd ( lat ) * cosd ( lon ) y = cxyz [ 2 ] + ( r + 1500_000 ) * cosd ( lat ) * sind ( lon ) z = cxyz [ 3 ] + ( r + 1500_000 ) * sind ( lat ) return ( x , y , z ) ./ 1500_000 end lons , lats = earthquakes . longitude , earthquakes . latitude depth = earthquakes . depth mag = earthquakes . mag toPoints3D = [ Point3f ([ toCartesian ( lons [ i ], lats [ i ]; r = - depth [ i ] * 1000 ) ... ]) for i in eachindex ( lons )] ms = ( exp . ( mag ) .- minimum ( exp . ( mag ))) ./ maximum ( exp . ( mag ) .- minimum ( exp . ( mag ))) with_theme ( theme_black ()) do fig = Figure ( resolution = ( 1600 , 1600 ), fontsize = 32 ) ax = LScene ( fig [ 1 , 1 ], show_axis = false ) pltobj = meshscatter! ( ax , toPoints3D ; markersize = ms / 20 .+ 0.001 , color = mag , colormap = resample_cmap ( :afmhot , 256 )[ 10 : end ], shading = true , ambient = Vec3f ( 0.99 , 0.99 , 0.99 )) surface! ( ax , sphere (; r = 1.0 ) ... , color = tuple . ( earth_img , 0.1 ), shading = true , transparency = true ) Colorbar ( fig [ 1 , 2 ], pltobj , label = \"Magnitude\" , height = Relative ( 1.5 / 4 )) Label ( fig [ 1 , 1 , Bottom ()], \"Visualization by @LazarusAlon \\n using Makie\" ) Label ( fig [ 1 , 1 , Top ()], \"Earthquakes on Earth between January 2021 and January 2022. \\n Original data from USGS\" ) zoom! ( ax . scene , cameracontrols ( ax . scene ), 0.65 ) rotate! ( ax . scene , 3.0 ) # uncomment to get the animation # record(fig, joinpath(@__DIR__, \"earthquakes.mp4\"), framerate = 24) do io # for i in 3.0:0.015:9.5 # rotate!(ax.scene, i) # recordframe!(io) # record a new frame # end # end fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CSV\" , \"DataFrames\" , \"GLMakie\" , \"Colors\" , \"ColorSchemes\" , \"FileIO\" , \"Downloads\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [336ed68f] CSV v0.10.4 [35d6a980] ColorSchemes v3.19.0 [5ae59095] Colors v0.12.8 [a93c6f00] DataFrames v1.3.5 [5789e2e9] FileIO v1.15.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Earthquakes on Earth: depth not at scale"},{"location":"examples/generated/2d/geo/blue_marbel/","text":"using GLMakie , FileIO using Downloads : download GLMakie . activate! () earth_img = load ( download ( \"https://upload.wikimedia.org/wikipedia/commons/5/56/Blue_Marble_Next_Generation_%2B_topography_%2B_bathymetry.jpg\" )) n = 1024 \u00f7 4 # 2048 \u03b8 = LinRange ( 0 , \u03c0 , n ) \u03c6 = LinRange ( 0 , 2 \u03c0 , 2 * n ) x = [ cos ( \u03c6 ) * sin ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] y = [ sin ( \u03c6 ) * sin ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] z = [ cos ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] fig = Figure ( resolution = ( 1200 , 800 ), backgroundcolor = :grey80 ) ax = LScene ( fig [ 1 , 1 ], show_axis = false ) surface! ( ax , x , y , z ; color = earth_img , shading = false , lightposition = Vec3f ( - 2 , - 3 , - 3 ), ambient = Vec3f ( 0.8 , 0.8 , 0.8 ), backlight = 1.5f0 , ) zoom! ( ax . scene , cameracontrols ( ax . scene ), 0.65 ) rotate! ( ax . scene , Vec3f ( 0 , 0 , 1 ), 3.0 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"FileIO\" , \"Downloads\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5789e2e9] FileIO v1.15.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Blue Marbel"},{"location":"examples/generated/2d/geo/coastlines/","text":"using GLMakie , GeoMakie GLMakie . activate! () fig = Figure ( resolution = ( 1200 , 800 ), fontsize = 22 ) ax = GeoAxis ( fig [ 1 , 1 ]; title = \"coastlines\" , coastlines = true , # plot coastlines from Natural Earth. ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"GeoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 [db073c08] GeoMakie v0.4.2 This page was generated using Literate.jl .","title":"coastlines"},{"location":"examples/generated/2d/geo/donut_earth_sun/","text":"using GLMakie , FileIO using Downloads : download GLMakie . activate! () nasa = \"https://eoimages.gsfc.nasa.gov/images/imagerecords/\" earth_link = nasa * \"73000/73963/gebco_08_rev_bath_3600x1800_color.jpg\" earth = load ( download ( earth_link )) sun_link = \"https://www.solarsystemscope.com/textures/download/2k_sun.jpg\" sun = load ( download ( sun_link )) n = 1024 \u00f7 4 # 2048 U = LinRange ( - pi , pi , 2 n ) V = LinRange ( - pi , pi , n ) x1 = [ cos ( u ) + .5 * cos ( u ) * cos ( v ) for u in U , v in V ] y1 = [ sin ( u ) + .5 * sin ( u ) * cos ( v ) for u in U , v in V ] z1 = [ .5 * sin ( v ) for u in U , v in V ] x2 = [ 1 + cos ( u ) + .5 * cos ( u ) * cos ( v ) for u in U , v in V ] y2 = [ .5 * sin ( v ) for u in U , v in V ] z2 = [ sin ( u ) + .5 * sin ( u ) * cos ( v ) for u in U , v in V ] with_theme ( theme_dark ()) do fig , ax , = surface ( x1 , y1 , z1 ; color = earth ' [ : , end :- 1 : 1 ], shading = true , ambient = Vec3f ( 0.85 , 0.85 , 0.85 ), backlight = 1.5f0 , axis = (; type = Axis3 , aspect = :data , perspectiveness = 0.5 , azimuth = - 1.56 , elevation = 0.58 ), figure = (; resolution = ( 1200 , 800 ))) surface! ( ax , x2 , y2 , z2 ; color = sun ' [ : , end :- 1 : 1 ], shading = true , ambient = Vec3f ( 0.85 , 0.85 , 0.85 ), backlight = 1.5f0 ) hidedecorations! ( ax ; grid = false ) fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"FileIO\" , \"Downloads\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5789e2e9] FileIO v1.15.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Donut: Earth & Sun"},{"location":"examples/generated/2d/geo/moon/","text":"using GLMakie , FileIO using Downloads : download GLMakie . activate! () moon = load ( download ( \"https://svs.gsfc.nasa.gov/vis/a000000/a004600/a004675/phases.0001_print.jpg\" )) n = 1024 # 2048 \u03b8 = LinRange ( 0 , pi , n ) \u03c6 = LinRange ( 0 , 2 * pi , 2 * n ) x = [ cos ( \u03c6 ) * sin ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] y = [ sin ( \u03c6 ) * sin ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] z = [ cos ( \u03b8 ) for \u03b8 in \u03b8 , \u03c6 in \u03c6 ] fig = Figure ( resolution = ( 900 , 900 ), backgroundcolor = \"#748AA6\" ) ax = Axis3 ( fig , aspect = :data , viewmode = :fitzoom , #perspectiveness = 0.5, azimuth = 0.01 \u03c0 , elevation = 0.85 \u03c0 ,) surface! ( ax , x , y , z ; color = moon , shading = true , lightposition = Vec3f ( - 2 , - 3 , - 3 ), ambient = Vec3f ( 0.8 , 0.8 , 0.8 ), backlight = 1.5f0 ) hidedecorations! ( ax ) hidespines! ( ax ) fig [ 1 , 1 ] = ax fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"FileIO\" , \"Downloads\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5789e2e9] FileIO v1.15.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Moon"},{"location":"examples/generated/2d/geo/projections/","text":"using GLMakie , GeoMakie GLMakie . activate! () # consider this list as examples for your use cases projections = [ \"+proj=adams_hemi\" , \"+proj=adams_ws1\" , \"+proj=adams_ws2\" , \"+proj=aea +lat_1=29.5 +lat_2=42.5\" , \"+proj=aeqd\" , \"+proj=airy\" , \"+proj=aitoff\" , \"+proj=apian\" , \"+proj=august\" , \"+proj=bacon\" , \"+proj=bertin1953\" , \"+proj=bipc +ns\" , \"+proj=boggs\" , \"+proj=bonne +lat_1=10\" , \"+proj=cass\" , \"+proj=cea\" , \"+proj=chamb +lat_1=10 +lon_1=30 +lon_2=40\" , \"+proj=collg\" , \"+proj=comill\" , \"+proj=crast\" , \"+proj=denoy\" , \"+proj=eck1\" , \"+proj=eck2\" , \"+proj=eck3\" , \"+proj=eck4\" , \"+proj=eck5\" , \"+proj=eck6\" , \"+proj=eqc\" , \"+proj=eqdc +lat_1=55 +lat_2=60\" , \"+proj=eqearth\" , \"+proj=euler +lat_1=67 +lat_2=75\" , \"+proj=fahey\" , \"+proj=fouc\" , \"+proj=fouc_s\" , \"+proj=gall\" , \"+proj=geos +h=35785831.0 +lon_0=-60 +sweep=y\" , \"+proj=gins8\" , \"+proj=gn_sinu +m=2 +n=3\" , \"+proj=goode\" , \"+proj=guyou\" , \"+proj=hammer\" , \"+proj=hatano\" , \"+proj=igh\" , \"+proj=igh_o +lon_0=-160\" , \"+proj=imw_p +lat_1=30 +lat_2=-40\" , \"+proj=isea\" , \"+proj=kav5\" , \"+proj=kav7\" , \"+proj=laea\" , \"+proj=lagrng\" , \"+proj=larr\" , \"+proj=lask\" , \"+proj=lcca +lat_0=35\" , \"+proj=leac\" , \"+proj=loxim\" , \"+proj=lsat +ellps=GRS80 +lat_1=-60 +lat_2=60 +lsat=2 +path=2\" , \"+proj=mbt_s\" , \"+proj=mbt_fps\" , \"+proj=mbtfpp\" , \"+proj=mbtfpq\" , \"+proj=mbtfps\" , \"+proj=merc\" , \"+proj=mill\" , \"+proj=misrsom +path=1\" , \"+proj=moll\" , \"+proj=murd1 +lat_1=30 +lat_2=50\" , \"+proj=murd3 +lat_1=30 +lat_2=50\" , \"+proj=natearth\" , \"+proj=natearth2\" , \"+proj=nell\" , \"+proj=nell_h\" , \"+proj=nicol\" , \"+proj=ob_tran +o_proj=mill +o_lon_p=40 +o_lat_p=50 +lon_0=60\" , \"+proj=ocea\" , \"+proj=oea +m=1 +n=2\" , \"+proj=omerc +lat_1=45 +lat_2=55\" , \"+proj=ortel\" , \"+proj=ortho\" , \"+proj=patterson\" , \"+proj=poly\" , \"+proj=putp1\" , \"+proj=putp2\" , \"+proj=putp3\" , \"+proj=putp3p\" , \"+proj=putp4p\" , \"+proj=putp5\" , \"+proj=putp5p\" , \"+proj=putp6\" , \"+proj=putp6p\" , \"+proj=qua_aut\" , \"+proj=robin\" , \"+proj=rouss\" , \"+proj=rpoly\" , \"+proj=sinu\" , \"+proj=times\" , \"+proj=tissot +lat_1=60 +lat_2=65\" , \"+proj=tmerc\" , \"+proj=tobmerc\" , \"+proj=tpeqd +lat_1=60 +lat_2=65\" , \"+proj=urm5 +n=0.9 +alpha=2 +q=4\" , \"+proj=urmfps +n=0.5\" , \"+proj=vandg\" , \"+proj=vandg2\" , \"+proj=vandg3\" , \"+proj=vandg4\" , \"+proj=vitk1 +lat_1=45 +lat_2=55\" , \"+proj=wag1\" , \"+proj=wag2\" , \"+proj=wag3\" , \"+proj=wag4\" , \"+proj=wag5\" , \"+proj=wag6\" , \"+proj=wag7\" , \"+proj=webmerc +datum=WGS84\" , \"+proj=weren\" , \"+proj=wink1\" , \"+proj=wink2\" , \"+proj=wintri\" ] sproj = [ \"+proj=weren\" , \"+proj=crast\" , \"+proj=wink1\" , \"+proj=wink2\" , \"+proj=wintri\" , \"+proj=poly\" , \"+proj=putp1\" , \"+proj=putp2\" , \"+proj=putp3\" , \"+proj=putp3p\" , \"+proj=putp4p\" , \"+proj=putp5\" , \"+proj=putp5p\" , \"+proj=putp6\" , \"+proj=putp6p\" , \"+proj=qua_aut\" , \"+proj=robin\" , \"+proj=rouss\" , \"+proj=rpoly\" , \"+proj=sinu\" ] # let's plot just a few function plotproj () fig = Figure ( resolution = ( 1600 , 900 )) k = 1 for i in 1 : 2 , j in 1 : 2 ga = GeoAxis ( fig [ i , j ]; dest = sproj [ k ], title = sproj [ k ], coastlines = true ) hidedecorations! ( ga ) k += 1 end fig end plotproj () Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"GeoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 [db073c08] GeoMakie v0.4.2 This page was generated using Literate.jl .","title":"projections"},{"location":"examples/generated/2d/geo/submarine_cables/","text":"using GeoMakie , GLMakie , Downloads using GeoJSON , GeoInterface GLMakie . activate! () # data from # https://github.com/telegeography/www.submarinecablemap.com urlPoints = \"https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/landing-point/landing-point-geo.json\" urlCables = \"https://raw.githubusercontent.com/telegeography/www.submarinecablemap.com/master/web/public/api/v3/cable/cable-geo.json\" landPoints = Downloads . download ( urlPoints , IOBuffer ()) landCables = Downloads . download ( urlCables , IOBuffer ()) land_geoPoints = GeoJSON . read ( seekstart ( landPoints )) land_geoCables = GeoJSON . read ( seekstart ( landCables )) toPoints = GeoMakie . geo2basic ( land_geoPoints ) # toLines = GeoMakie.geo2basic(land_geoCables) ## this should probably be supported. feat = GeoInterface . features ( land_geoCables ) toLines = GeoInterface . coordinates . ( GeoInterface . geometry . ( feat )) splitLines = [] for i in eachindex ( toLines ) for j in eachindex ( toLines [ i ]) push! ( splitLines , Point2f . ( toLines [ i ][ j ])) end end lons = - 180 : 180 lats = - 90 : 90 field = [ exp ( cosd ( l )) + 3 ( y / 90 ) for l in lons , y in lats ] function plotCables () fig , ax , = scatter ( toPoints ; markersize = 5 , color = 1 : length ( toPoints ), colormap = :plasma , figure = (; resolution = ( 1200 , 800 ), fontsize = 24 )) [ lines! ( ax , splitLines [ i ]; linewidth = 0.85 ) for i in eachindex ( splitLines )] lines! ( GeoMakie . coastlines (); color = :white , linewidth = 0.35 ) limits! ( ax , - 185 , 185 , - 95 , 95 ) ax . xticks = - 180 : 60 : 180 ax . yticks = - 90 : 30 : 90 ax . xtickformat = \"{:d}\u1d52\" ax . ytickformat = \"{:d}\u1d52\" fig end fig = with_theme ( plotCables , theme_dark ()) This page was generated using Literate.jl .","title":"Submarine Cables"},{"location":"examples/generated/2d/geo/us_states/","text":"using Makie , GLMakie , GeoMakie import Downloads using GeoJSON using GeoInterface GLMakie . activate! () states = Downloads . download ( \"https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json\" ) states_geo = GeoJSON . read ( read ( states , String )) n = length ( GeoInterface . features ( states_geo )) fig = Figure ( resolution = ( 1200 , 800 ), fontsize = 22 ) ax = GeoAxis ( fig [ 1 , 1 ]; dest = \"+proj=wintri\" , coastlines = true , title = \"Projection: Winkel Tripel, US States\" , tellheight = true ) poly! ( ax , states_geo , color = 1 : n , colormap = :plasma , strokecolor = :black , strokewidth = 1 , overdraw = true , transformation = ( :xy , 10 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"Makie\" , \"GLMakie\" , \"GeoMakie\" , \"Downloads\" , \"GeoJSON\" , \"GeoInterface\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 \u2305 [cf35fbd7] GeoInterface v0.5.7 \u2305 [61d90e0f] GeoJSON v0.5.1 [db073c08] GeoMakie v0.4.2 [ee78f7c6] Makie v0.17.13 Info Packages marked with \u2305 have new versions available but cannot be upgraded. To see why use `status --outdated` This page was generated using Literate.jl .","title":"Winkel Tripel, US States"},{"location":"examples/generated/2d/heatmaps/heatmap/","text":"using CairoMakie , Random Random . seed! ( 123 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; xlabel = \"x\" , ylabel = \"y\" ) hmap = heatmap! ( 2 rand ( 20 , 20 ) .- 1 ; colormap = :Spectral_11 ) Colorbar ( fig [ 1 , 2 ], hmap ; label = \"values\" , width = 15 , ticksize = 15 , tickalign = 1 ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) colgap! ( fig . layout , 7 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"heatmap"},{"location":"examples/generated/2d/heatmaps/text_heatmap/","text":"using CairoMakie , Random Random . seed! ( 123 ) m = 15 n = 5 data = rand ( m , n ) # some fake ticks alphabet = 'A' : 'E' yticks = string . ( collect ( alphabet )) k = 4 itr = Iterators . product ( ntuple ( _ -> alphabet , k ) ... ) xticks = [] for word in Base . Generator ( join , itr ) push! ( xticks , word ) if length ( xticks ) == m break end end xticks = string . ( xticks ) fig = Figure ( resolution = ( 1200 , 600 ), fontsize = 20 ) ax = Axis ( fig [ 1 , 1 ], xticks = ( 1 : m , xticks ), yticks = ( 1 : n , yticks )) hmap = heatmap! ( ax , data , colormap = :plasma ) for i in 1 : 15 , j in 1 : 5 txtcolor = data [ i , j ] < 0.15 ? :white : :black text! ( ax , \" $ ( round ( data [ i , j ], digits = 2 )) \" , position = ( i , j ), color = txtcolor , align = ( :center , :center )) end Colorbar ( fig [ 1 , 2 ], hmap ; label = \"values\" , width = 15 , ticksize = 15 ) ax . xticklabelrotation = \u03c0 / 3 ax . xticklabelalign = ( :right , :center ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"heatmap with text"},{"location":"examples/generated/2d/histogram/bins_counts/","text":"using CairoMakie , Random Random . seed! ( 13 ) n = 3000 data = randn ( n ) fig = Figure ( resolution = ( 1200 , 800 ), font = \"sans\" , fontsize = 20 ) ax1 = Axis ( fig [ 1 , 1 ]; xlabel = \"value\" , ylabel = \"samples\" ) ax2 = Axis ( fig [ 1 , 2 ]; xlabel = \"value\" , ylabel = \"counts\" ) ax3 = Axis ( fig [ 2 , 1 ]; xlabel = \"value\" , ylabel = \"counts\" ) ax4 = Axis ( fig [ 2 , 2 ]; xlabel = \"value\" , ylabel = \"counts\" ) #scatter plot scatter! ( ax1 , data , 1 : n ; markersize = 4 , color = :black ) hist! ( ax2 , data ; label = \"default\" ) hist! ( ax3 , data ; bins = 20 , color = :orange , strokewidth = 1 , strokecolor = :black , label = \"20 bins\" ) hist! ( ax4 , data ; bins = [ - 4 , - 2 , - 1 , 0 , 1 , 2 , 4 ], color = :gray90 , strokewidth = 1 , strokecolor = :black , label = \"manual bins\" ) axislegend ( ax2 ; position = :rt ) axislegend ( ax3 ; position = :rt ) axislegend ( ax4 ; position = :rt ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Bins and counts"},{"location":"examples/generated/2d/histogram/hist/","text":"using CairoMakie , Distributions , Random Random . seed! ( 124 ) cmap = resample_cmap ( :linear_wcmr_100_45_c42_n256 , 256 ; alpha = rand ( 256 )) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; ) hist! ( rand ( Normal ( 2.6 , 0.4 ), 1000 ), normalization = :pdf , offset = - 1 , color = :values , colormap = :plasma , direction = :x , fillto = - 0.5 ) hist! ( rand ( Normal ( 2.6 , 0.4 ), 1000 ), normalization = :pdf , offset = 1 , color = :grey10 , direction = :x , scale_to = - 0.5 ) hist! ( rand ( Normal ( 0.2 , 0.2 ), 1000 ), normalization = :pdf , offset = 4 , strokewidth = 1 , color = :transparent , strokecolor = :black , direction = :y , scale_to = - 1 ) hist! ( rand ( Normal ( 0.2 , 0.2 ), 1000 ), normalization = :pdf , color = :values , colormap = cmap , strokewidth = 1 , strokecolor = :black , bar_labels = :values , label_color = :black , label_size = 12 , label_formatter = x -> round ( x , digits = 1 )) hidedecorations! ( ax ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"Distributions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [31c24e10] Distributions v0.25.70 This page was generated using Literate.jl .","title":"hist"},{"location":"examples/generated/2d/histogram/hist_pdf/","text":"using CairoMakie , Random Random . seed! ( 13 ) n = 3000 data = randn ( n ) fig = Figure ( resolution = ( 600 , 400 )) ax1 = Axis ( fig [ 1 , 1 ], xlabel = \"value\" ) hist! ( ax1 , data ; normalization = :pdf , color = ( :green , 0.5 ), label = \"hist & pdf\" ) density! ( ax1 , data ; color = ( :orange , 0.25 ), label = \"density!\" , strokewidth = 1 ) axislegend ( ax1 , position = :rt ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"hist + pdf = density"},{"location":"examples/generated/2d/histogram/hists_on_the_sides/","text":"using CairoMakie , Random # see also https://discourse.julialang.org/t/beautiful-makie-gallery/62523/31 Random . seed! ( 123 ) n = 200 x , y , color = randn ( n ) / 2 , randn ( n ), randn ( n ) fig = Figure ( resolution = ( 600 , 400 )) ax1 = Axis ( fig [ 1 , 1 ]) ax2 = Axis ( fig [ 2 , 1 ]) ax3 = Axis ( fig [ 2 , 2 ]) hist! ( ax1 , x ; color = ( :orangered , 0.5 ), strokewidth = 0.5 ) scatter! ( ax2 , x , y ; color = color , markersize = 10 , marker = :circle , strokewidth = 0 ) hist! ( ax3 , y ; direction = :x , color = ( :dodgerblue , 0.5 ), strokewidth = 0.5 ) xlims! ( ax1 , - 4 , 4 ) limits! ( ax2 , - 4 , 4 , - 3 , 3 ) ylims! ( ax3 , - 3 , 3 ) hideydecorations! ( ax3 , ticks = false , grid = false ) hidexdecorations! ( ax1 , ticks = false , grid = false ) colsize! ( fig . layout , 1 , Relative ( 2 / 3 )) rowsize! ( fig . layout , 1 , Relative ( 1 / 3 )) colgap! ( fig . layout , 10 ) rowgap! ( fig . layout , 10 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"histograms on the sides"},{"location":"examples/generated/2d/histogram/normalizations/","text":"using CairoMakie , Random Random . seed! ( 13 ) n = 3000 data = randn ( n ) normf = [ :none , :pdf , :density , :probability ] colors = Makie . wong_colors () fig = Figure ( resolution = ( 1200 , 800 ), font = \"sans\" , fontsize = 20 ) axs = [ Axis ( fig [ i , j ], xlabel = i == 2 ? \"value\" : \"\" ) for i in 1 : 2 for j in 1 : 2 ] [ hist! ( axs [ i ], data ; normalization = normf [ i ], color = colors [ i ], label = \" $ ( normf [ i ]) \" ) for i in 1 : 4 ] [ axislegend ( axs [ i ], position = :rt ) for i in 1 : 4 ] fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Normalization options"},{"location":"examples/generated/2d/histogram/parallel_image_hist/","text":"using CairoMakie import TestImages , Images # example by @cormullion function image_histogram () img = TestImages . testimage ( \"lighthouse\" ) reds = vec ( float . ( Images . red . ( img ))) greens = vec ( float . ( Images . green . ( img ))) blues = vec ( float . ( Images . blue . ( img ))) fig = Figure (; resolution = ( 1200 , 400 )) ax1 = Axis ( fig [ 1 , 1 ], aspect = DataAspect ()) ax2 = Axis ( fig [ 1 , 2 ]) for ( i , col ) = enumerate ([ :red , :green , :blue ]) hist! ( ax2 , ( reds , greens , blues )[ i ]; scale_to =- 0.6 , bins = 60 , offset = i , direction = :x , color = ( col , 0.85 ) ) end image! ( ax1 , rotr90 ( img )) hidedecorations! ( ax1 ) hidespines! ( ax1 ) fig end fig = with_theme ( image_histogram , theme_ggplot2 ()) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"StatsBase\" , \"Images\" , \"TestImages\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [916415d5] Images v0.25.2 [5e47fb64] TestImages v1.7.0 This page was generated using Literate.jl .","title":"hist from image"},{"location":"examples/generated/2d/lines/line_cmap/","text":"using CairoMakie , ColorSchemes x = LinRange ( 0 , 2 \u03c0 , 100 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" ) obj = lines! ( x , sin . ( x ); color = x , colormap = :viridis , linewidth = 5 ) lines! ( x , cos . ( x ), color = :black , label = \"cos(x)\" , linewidth = 1 ) lines! ( x , - cos . ( x ), color = :dodgerblue , label = \"-cos(x)\" ) axislegend ( ax ) Colorbar ( fig [ 1 , 2 ], obj , label = \"sin(x)\" ) colgap! ( fig . layout , 5 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 This page was generated using Literate.jl .","title":"Lines Colorbar"},{"location":"examples/generated/2d/lines/line_cmaps/","text":"using CairoMakie , ColorSchemes x = LinRange ( 0 , 2 \u03c0 , 50 ) fig = Figure ( resolution = ( 800 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = L \"x\" , xlabelsize = 22 ) line1 = lines! ( x , sin . ( x ); color = x , colormap = :thermal , linewidth = 4 ) line2 = lines! ( x , cos . ( x ); color = sqrt . ( x ), colormap = :ice , linewidth = 4 ) line3 = lines! ( x , - sin . ( x ); color = x .^ 2 , colormap = :viridis , linewidth = 4 ) line4 = lines! ( x , - cos . ( x ); color = x / 2 , colormap = :plasma , linewidth = 4 ) lineas = [ line1 , line2 , line3 , line4 ] labels = [ L \"x\" , L \"\\sqrt{x}\" , L \"x^{2}\" , L \"x/2\" ] cbars = [ Colorbar ( fig [ 1 , i + 1 ], lineas [ i ], label = labels [ i ], labelsize = 22 ) for i in 1 : 4 ] colgap! ( fig . layout , 5 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 This page was generated using Literate.jl .","title":"Lines with different Colorbars"},{"location":"examples/generated/2d/lines/line_cmaps_a/","text":"using CairoMakie , ColorSchemes x = LinRange ( 0 , 2 \u03c0 , 50 ) fig = Figure ( resolution = ( 800 , 600 ), fontsize = 22 ) ax = Axis ( fig , xlabel = L \"x\" , ylabel = L \"y\" ) line1 = lines! ( x , sin . ( x ), color = x , colormap = :thermal , linewidth = 4 ) line2 = lines! ( x , cos . ( x ), color = sqrt . ( x ), colormap = :ice , linewidth = 4 ) line3 = lines! ( x , - sin . ( x ), color = x .^ 2 , colormap = :viridis , linewidth = 4 ) line4 = lines! ( x , - cos . ( x ), color = x / 2 , colormap = :plasma , linewidth = 4 ) labels = [ L \"x\" , L \"\\sqrt{x}\" , L \"x^{2}\" , L \"x/2\" ] cbar1 = Colorbar ( fig , line1 , label = labels [ 1 ], width = 10 , ticksize = 5 ) cbar2 = Colorbar ( fig , line2 , label = labels [ 2 ], flipaxis = false , height = Relative ( 3.5 / 4 ), width = 10 , ticksize = 10 ) cbar3 = Colorbar ( fig , line3 , label = labels [ 3 ], vertical = false , ticksize = 10 , tickalign = 0 , flipaxis = false , width = Relative ( 4 / 4 ), height = 10 , tickcolor = :red ) cbar4 = Colorbar ( fig , line4 , label = labels [ 4 ], vertical = false , width = Relative ( 3 / 4 ), height = 10 , ticksize = 10 , tickalign = 1 ) fig [ 1 , 2 ] = cbar4 fig [ 2 , 1 ] = cbar2 fig [ 2 , 2 ] = ax fig [ 2 , 3 ] = cbar1 fig [ 3 , 2 ] = cbar3 colgap! ( fig . layout , 5 ) rowgap! ( fig . layout , 5 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 This page was generated using Literate.jl .","title":"Lines with Colorbars around"},{"location":"examples/generated/2d/lines/line_colored/","text":"using CairoMakie , ColorSchemes xs = 0 : 0.01 : 1 p = - 10 : 1 : 10 p = filter ( x -> x != 0 , collect ( p )) psize = length ( p ) ys = zeros ( length ( xs ), psize ) for ( indx , i ) in enumerate ( p ) if i <= - 1 ys [ : , indx ] = xs .^ ( 1 / abs ( i )) elseif i >= 1 ys [ : , indx ] = xs .^ i end end cbarPal = :thermal cmap = cgrad ( colorschemes [ cbarPal ], psize , categorical = true ) fig = Figure ( resolution = ( 600 , 400 ), font = \"CMU Serif\" ) ax = Axis ( fig [ 1 , 1 ], aspect = 1 , xlabel = L \"x\" , ylabel = L \"x^{p}\" , xlabelsize = 22 , ylabelsize = 22 ) [ lines! ( xs , ys [ : , v ], color = cmap [ v ], label = \" $ ( p [ v ]) \" ) for v in 1 : psize ] Legend ( fig [ 1 , 2 ], ax , nbanks = 2 , label = L \"p\" ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 This page was generated using Literate.jl .","title":"Colored lines"},{"location":"examples/generated/2d/lines/line_colored_cbar/","text":"using CairoMakie , ColorSchemes xs = 0 : 0.01 : 1 p = - 10 : 1 : 10 p = filter ( x -> x != 0 , collect ( p )) psize = length ( p ) ys = zeros ( length ( xs ), psize ) for ( indx , i ) in enumerate ( p ) if i <= - 1 ys [ : , indx ] = xs .^ ( 1 / abs ( i )) elseif i >= 1 ys [ : , indx ] = xs .^ i end end cbarPal = :thermal cmap = cgrad ( colorschemes [ cbarPal ], psize , categorical = true ) fig = Figure ( resolution = ( 600 , 400 ), font = \"CMU Serif\" ) ax = Axis ( fig [ 1 , 1 ], xlabel = L \"x\" , ylabel = L \"x^{p}\" , xlabelsize = 22 , ylabelsize = 22 ) [ lines! ( xs , ys [ : , v ], color = cmap [ v ]) for v in 1 : psize ] Colorbar ( fig [ 1 , 2 ], limits = ( - 10 , 10 ), nsteps = psize , colormap = cmap , label = L \"p\" , ticksize = 20 , width = 20 , tickalign = 1 ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 This page was generated using Literate.jl .","title":"Colored line Colorbar"},{"location":"examples/generated/2d/lines/line_inset/","text":"using CairoMakie , Random Random . seed! ( 123 ) x = - 3 : 0.05 : 3 y = exp . ( - x .^ 2 ) n = 15 y [ 1 : n ] = y [ 1 : n ] .+ 0.02 * randn ( n ) fig = Figure ( resolution = ( 600 , 400 )) ax1 = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"f(x)\" , xgridvisible = true , ygridvisible = true ) lines! ( ax1 , x , y , color = :red , label = \"f(x)\" ) axislegend () # inset ax2 = Axis ( fig , bbox = BBox ( 140 , 250 , 200 , 300 ), xticklabelsize = 12 , yticklabelsize = 12 , title = \"inset at (140, 250, 200, 300)\" ) lines! ( ax2 , x , y , color = :red ) limits! ( ax2 , - 3.1 , - 1.9 , - 0.05 , 0.05 ) ax2 . yticks = [ - 0.05 , 0 , 0.05 ] ax2 . xticks = [ - 3 , - 2.5 , - 2 ] translate! ( ax2 . scene , 0 , 0 , 10 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Inset"},{"location":"examples/generated/2d/lines/line_inset_h/","text":"using CairoMakie x = y = - 10 : 0.11 : 10 y1d = sin . ( x ) ./ x # 3D heatmap sinc2d ( x , y ) = sin . ( sqrt . ( x .^ 2 + y .^ 2 )) ./ sqrt . ( x .^ 2 + y .^ 2 ) fxy = [ sinc2d ( x , y ) for x in x , y in y ] fig = Figure ( resolution = ( 600 , 400 )) ax1 = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"f(x)\" , xgridvisible = true , ygridvisible = true ) lines! ( ax1 , x , y1d , color = :red , label = \"sinc(x)\" ) axislegend () # inset ax2 = Axis ( fig , bbox = BBox ( 140 , 260 , 260 , 350 ), xticklabelsize = 12 , yticklabelsize = 12 , title = \"inset at (140, 260, 260, 350)\" ) hmap = heatmap! ( ax2 , x , y , fxy , colormap = :Spectral_11 ) Colorbar ( fig [ 1 , 1 ], hmap , label = \"sinc(x,y)\" , labelpadding = 5 , tellheight = false , tellwidth = false , ticklabelsize = 12 , width = 10 , height = Relative ( 1.5 / 4 ), halign = :right , valign = :center ) limits! ( ax2 , - 10 , 10 , - 10 , 10 ) hidespines! ( ax2 ) ax2 . yticks = [ - 10 , 0 , 10 ] ax2 . xticks = [ - 10 , 0 , 10 ] fig Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Inset heatmap"},{"location":"examples/generated/2d/lines/line_latex/","text":"using CairoMakie x = 0 : 0.05 : 4 \u03c0 fig = Figure ( resolution = ( 600 , 400 ), font = \"CMU Serif\" ) ## probably you need to install this font in your system ax = Axis ( fig [ 1 , 1 ], xlabel = L \"x\" , ylabel = L \"f (x)\" , ylabelsize = 22 , xlabelsize = 22 , xgridstyle = :dash , ygridstyle = :dash , xtickalign = 1 , xticksize = 10 , ytickalign = 1 , yticksize = 10 , xlabelpadding = - 10 ) lines! ( x , x -> sin ( 3 x ) / ( cos ( x ) + 2 ) / x ; label = L \" \\f rac{\\sin(3x)}{x(\\cos(x) + 2)}\" ) lines! ( x , x -> cos ( x ) / x ; label = L \"\\cos(x)/x\" ) lines! ( x , x -> exp ( - x ); label = L \"e^{-x}\" ) ylims! ( - 0.6 , 1.05 ) xlims! ( - 0.5 , 12 ) axislegend ( L \"f(x)\" ; position = :rt , bgcolor = ( :grey90 , 0.25 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Latex"},{"location":"examples/generated/2d/lines/line_latex_bessel/","text":"using CairoMakie , LaTeXStrings , SpecialFunctions x = 0 : 0.1 : 15 fig = Figure ( resolution = ( 600 , 400 ), font = \"CMU Serif\" ) ax = Axis ( fig [ 1 , 1 ], xlabel = L \"x\" , ylabel = L \"J_{ \\n u}(x)\" , ylabelsize = 22 , xlabelsize = 22 , xgridstyle = :dash , ygridstyle = :dash , xtickalign = 1 , xticksize = 10 , ytickalign = 1 , yticksize = 10 , xlabelpadding = - 10 ) for \u03bd in 0 : 6 lines! ( ax , x , besselj . ( \u03bd , x ), label = latexstring ( \"J_{ $ ( \u03bd ) }(x)\" )) end axislegend (; nbanks = 3 , framecolor = ( :grey , 0.5 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"LaTeXStrings\" , \"SpecialFunctions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [b964fa9f] LaTeXStrings v1.3.0 [276daf66] SpecialFunctions v2.1.7 This page was generated using Literate.jl .","title":"Bessel 1st"},{"location":"examples/generated/2d/lines/line_latex_bessels/","text":"using CairoMakie , LaTeXStrings , SpecialFunctions x = 0.1 : 0.1 : 15 cycle = Cycle ([ :color , :linestyle , :marker ], covary = true ) set_theme! ( Lines = ( cycle = cycle ,), Scatter = ( cycle = cycle ,)) fig = Figure ( resolution = ( 600 , 400 ), font = \"CMU Serif\" ) ## probably you need to install this font in your system ax = Axis ( fig [ 1 , 1 ], xlabel = L \"x\" , ylabel = L \"Y_{ \\n u}(x)\" , ylabelsize = 22 , xlabelsize = 22 , xgridstyle = :dash , ygridstyle = :dash , xtickalign = 1 , xticksize = 10 , ytickalign = 1 , yticksize = 10 , xlabelpadding = - 10 ) for \u03bd in 0 : 4 lines! ( ax , x , bessely . ( \u03bd , x ), label = latexstring ( \"Y_{ $ ( \u03bd ) }(x)\" ), linewidth = 2 ) end axislegend (; position = :rb , nbanks = 2 , framecolor = ( :grey , 0.5 )) ylims! ( - 1.8 , 0.7 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"LaTeXStrings\" , \"SpecialFunctions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [b964fa9f] LaTeXStrings v1.3.0 [276daf66] SpecialFunctions v2.1.7 This page was generated using Literate.jl .","title":"Bessel 2nd"},{"location":"examples/generated/2d/lines/line_single/","text":"using CairoMakie x = 1 : 10 lines ( x , x .^ 2 ; color = :black , linewidth = 2 , linestyle = \".-\" , label = L \"x^2\" , figure = ( resolution = ( 600 , 400 ), backgroundcolor = \"#a5b4b5\" , font = \"CMU Serif\" ), axis = ( xlabel = L \"x\" , ylabel = L \"x^2\" , backgroundcolor = :white , xlabelsize = 22 , ylabelsize = 22 )) axislegend ( \"legend\" , position = :lt ) limits! ( 0 , 10 , 0 , 100 ) current_figure () Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Single line"},{"location":"examples/generated/2d/lines/line_time/","text":"using CairoMakie , TimeSeries , Dates # dummy data dates = Date ( 2018 , 1 , 1 ) : Day ( 1 ) : Date ( 2018 , 12 , 31 ) ta = TimeArray ( dates , rand ( length ( dates ))) vals = 0.5 * values ( ta ) tempo = string . ( timestamp ( ta )) lentime = length ( tempo ) slice_dates = range ( 1 , lentime , step = lentime \u00f7 8 ) fig = Figure ( resolution = ( 600 , 400 ), font = :sans ) ax = Axis ( fig [ 1 , 1 ], xlabel = \"Date\" , ylabel = \"value\" ) line1 = lines! ( ax , 1 : lentime , vals ; color = :black , linewidth = 0.85 ) ax . xticks = ( slice_dates , tempo [ slice_dates ]) ax . xticklabelrotation = \u03c0 / 4 ax . xticklabelalign = ( :right , :center ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"TimeSeries\" , \"Dates\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [9e3dc215] TimeSeries v0.23.1 [ade2ca70] Dates This page was generated using Literate.jl .","title":"Time series"},{"location":"examples/generated/2d/lines/line_twin_axis/","text":"using CairoMakie fig = Figure ( resolution = ( 600 , 400 )) ax1 = Axis ( fig [ 1 , 1 ], yticklabelcolor = :black , rightspinevisible = false ) ax2 = Axis ( fig [ 1 , 1 ], yaxisposition = :right , yticklabelcolor = :dodgerblue , rightspinecolor = :dodgerblue , ytickcolor = :dodgerblue ) lines! ( ax1 , 0 .. 10 , x -> x ; color = :black ) lines! ( ax2 , 0 .. 10 , x -> exp ( - x ); color = :dodgerblue ) hidespines! ( ax2 , :l , :b , :t ) hidexdecorations! ( ax2 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Twin Axis"},{"location":"examples/generated/2d/lines/line_two/","text":"using CairoMakie x = - 2 \u03c0 : 0.1 : 2 \u03c0 lines ( x , sin . ( x ); color = \"#56B4E9\" , linewidth = 2 , label = L \"sin\" , axis = ( xlabel = L \"x\" , ylabel = L \"f(x)\" , xgridcolor = :red , xlabelsize = 22 , ylabelsize = 22 , xgridstyle = :dashdot , xgridwidth = 0.85 , xtickalign = 1 , xticksize = 20 ), figure = ( resolution = ( 600 , 400 ), font = \"CMU Serif\" )) lines! ( x , cos . ( x ); color = :black , linestyle = :dash , label = L \"cos\" ) limits! ( - 2 \u03c0 , 2 \u03c0 , - 1 , 1 ) axislegend ( \"Legend\" , position = :lb ) current_figure () Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Two lines"},{"location":"examples/generated/2d/lines/line_xlog/","text":"using CairoMakie x = LinRange ( 0.01 , 30 \u03c0 , 2000 ) y = sin . ( x ) lines ( x , y ; color = :black , figure = ( resolution = ( 600 , 400 ),), axis = ( xscale = log10 , xlabel = \"x\" , ylabel = \"y\" , xgridstyle = :dash , ygridstyle = :dash , xminorticksvisible = true , xminorticks = IntervalsBetween ( 9 ))) ## possible issue with log-ticks ylims! ( - 1 , 1 ) current_figure () Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"x log "},{"location":"examples/generated/2d/lines/line_xylog/","text":"using CairoMakie , Random Random . seed! ( 123 ) x = 0.001 : 0.05 : 10 y = x .^ 2 .+ abs . ( 2 * randn ( length ( x ))) lines ( x , y , color = :navy , figure = ( resolution = ( 600 , 400 ),), axis = ( xscale = log10 , yscale = log10 , xlabel = \"x\" , ylabel = \"y\" , xgridstyle = :dash , ygridstyle = :dash , xminorticksvisible = true , xminorticks = IntervalsBetween ( 9 ), yminorticksvisible = true , yminorticks = IntervalsBetween ( 9 ))) current_figure () Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"xy log"},{"location":"examples/generated/2d/lines/line_ylog/","text":"using CairoMakie x = LinRange ( 0.01 , 30 \u03c0 , 2000 ) y = cos . ( x ) lines ( y , x ; color = :orangered , figure = ( resolution = ( 600 , 400 ),), axis = ( yscale = log10 , xlabel = \"x\" , ylabel = \"y\" , xgridstyle = :dash , ygridstyle = :dash , yminorticksvisible = true , yminorticks = IntervalsBetween ( 9 ))) ## possible issue with log-ticks xlims! ( - 1 , 1 ) current_figure () Warning This example was autogenerated using: using Pkg Pkg . status ( \"CairoMakie\" ) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"y log"},{"location":"examples/generated/2d/lines3d/line3d/","text":"using GLMakie GLMakie . activate! () t = 0 : 0.1 : 15 lines ( sin . ( t ), cos . ( t ), t / 4 ; color = t / 4 , linewidth = 4 , colormap = :plasma ) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Line 3d"},{"location":"examples/generated/2d/lines3d/lines_wire_contour_3d/","text":"using GLMakie GLMakie . activate! () function peaks (; n = 49 ) x = LinRange ( - 3 , 3 , n ) y = LinRange ( - 3 , 3 , n ) a = 3 * ( 1 .- x ' ) .^ 2 .* exp . ( - ( x '.^ 2 ) .- ( y .+ 1 ) .^ 2 ) b = 10 * ( x ' / 5 .- x '.^ 3 .- y .^ 5 ) .* exp . ( - x '.^ 2 .- y .^ 2 ) c = 1 / 3 * exp . ( - ( x ' .+ 1 ) .^ 2 .- y .^ 2 ) return ( x , y , a .- b .- c ) end x , y , z = peaks (; n = 30 ) with_theme ( theme_dark ()) do fig = Figure ( resolution = ( 1200 , 800 )) axs = [ Axis3 ( fig [ 1 , i ]; aspect = :data ) for i in 1 : 3 ] contour3d! ( axs [ 1 ], x , y , z ; levels = 20 , transparency = true ) contour! ( axs [ 1 ], x , y , z ; levels = 20 , transformation = ( :xy , minimum ( z )), transparency = true ) lines! ( axs [ 2 ], cat ( x , NaN , dims = 1 ), y , vcat ( z , fill ( NaN , 30 ) ' ), color = maximum ( z , dims = 1 )[ 1 , : ], transparency = false ) lines! ( axs [ 2 ], cat ( x , NaN , dims = 1 ), y , vcat ( z , fill ( NaN , 30 ) ' ) * 0 .+ minimum ( z ); color = maximum ( z , dims = 1 )[ 1 , : ], transparency = true ) wireframe! ( axs [ 3 ], x , y , z ; color = :grey90 , transparency = true ) wireframe! ( axs [ 3 ], x , y , z * 0 .+ minimum ( z ); color = :grey90 , transparency = true ) hidedecorations! . ( axs ; grid = false ) fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Lines, contour3d, contour, wireframe"},{"location":"examples/generated/2d/lines3d/wireframe_torus/","text":"using GLMakie GLMakie . activate! () U = LinRange ( - pi , pi , 100 ) V = LinRange ( - pi , pi , 20 ) x1 = [ cos ( u ) + .5 * cos ( u ) * cos ( v ) for u in U , v in V ] y1 = [ sin ( u ) + .5 * sin ( u ) * cos ( v ) for u in U , v in V ] z1 = [ .5 * sin ( v ) for u in U , v in V ] x2 = [ 1 + cos ( u ) + .5 * cos ( u ) * cos ( v ) for u in U , v in V ] y2 = [ .5 * sin ( v ) for u in U , v in V ] z2 = [ sin ( u ) + .5 * sin ( u ) * cos ( v ) for u in U , v in V ] fig = Figure ( resolution = ( 1200 , 800 )) ax = LScene ( fig [ 1 , 1 ], show_axis = true ) wireframe! ( ax , x1 , y1 , z1 ; transparency = true ) axis = ax . scene [ OldAxis ] tstyle = axis [ :names ] tstyle [ :textsize ] = 16 tstyle [ :gap ] = 8 axis [ :ticks ][ :textcolor ] = :black axis [ :ticks ][ :textsize ] = 10 fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"wireframe: torus"},{"location":"examples/generated/2d/linesegments/RRGraph/","text":"# port from the original code used in: # L Alonso, et. al. https://doi.org/10.1093/comnet/cnx053 using LinearAlgebra , Random , CairoMakie function RRGAdjacencyM (; lengthBase = 1 , radius = 0.1 , nodes = 500 , rseed = 123 ) Random . seed! ( rseed ) xy = rand ( nodes , 2 ) x = lengthBase .* xy [ : , 1 ] y = xy [ : , 2 ] ./ lengthBase matrixAdjDiag = Diagonal ( \u221a 2 * randn ( nodes )) matrixAdj = zeros ( nodes , nodes ) for point in 1 : nodes - 1 distance = sqrt . (( x [ point + 1 : end ] .- x [ point ]) .^ 2 .+ ( y [ point + 1 : end ] .- y [ point ]) .^ 2 ) dindx = findall ( distance .<= radius ) .+ point if length ( dindx ) > 0 rnd = randn ( length ( dindx )) matrixAdj [ point , dindx ] = rnd matrixAdj [ dindx , point ] = rnd end end return ( matrixAdj .+ matrixAdjDiag , x , y ) end adjacencyM , x , y = RRGAdjacencyM () function getGraphEdges ( adjMatrix , x , y ) xyos = [] weights = [] for i in eachindex ( x ), j in i + 1 : length ( x ) if adjMatrix [ i , j ] != 0.0 push! ( xyos , [ x [ i ], y [ i ]]) push! ( xyos , [ x [ j ], y [ j ]]) push! ( weights , adjMatrix [ i , j ]) push! ( weights , adjMatrix [ i , j ]) end end return ( Point2f . ( xyos ), Float32 . ( weights )) end function plotGraph ( adjacencyM , x , y ) cmap = ( :Spectral_11 , 0.75 ) adjmin = minimum ( adjacencyM ) adjmax = maximum ( adjacencyM ) diagValues = diag ( adjacencyM ) segm , weights = getGraphEdges ( adjacencyM , x , y ) fig , ax , pltobj = linesegments ( segm ; color = weights , colormap = cmap , linewidth = abs . ( weights ) / 2 , colorrange = ( adjmin , adjmax ), figure = (; resolution = ( 800 , 600 )), axis = (; aspect = DataAspect ())) scatter! ( ax , x , y ; color = diagValues , markersize = 3 * abs . ( diagValues ), colorrange = ( adjmin , adjmax ), colormap = cmap ) limits! ( ax , - 0.02 , 1.02 , - 0.02 , 1.02 ) Colorbar ( fig [ 1 , 2 ], pltobj , label = \"weights\" ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig end rrgraph = with_theme ( theme_black ()) do plotGraph ( adjacencyM , x , y ) end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"LinearAlgebra\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [37e2e46d] LinearAlgebra This page was generated using Literate.jl .","title":"RRGraph"},{"location":"examples/generated/2d/linesegments/linesegments/","text":"using CairoMakie , Random , Distributions Random . seed! ( 1234 ) b = Binomial ( 10 , 0.85 ) n = 500 function someSegments (; n = 50 ) Point2f . ( vec ([[ x , rand ( b )] for i in 1 : 2 , x = rand ( n )])) end linesegments ( someSegments (; n = n ); color = rand ( n ), colormap = :Spectral_11 , linewidth = abs . ( randn ( n )), axis = (; xlabel = \"x\" , ylabel = \"y\" ), figure = (; resolution = ( 600 , 400 )) ) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"linesegments"},{"location":"examples/generated/2d/meshes/Earth_planes/","text":"using GLMakie , Colors , LinearAlgebra using GeometryBasics , Downloads , FileIO GLMakie . enable_SSAO [] = true GLMakie . closeall () # close any open screen link = \"https://www.solarsystemscope.com/textures/download/8k_earth_daymap.jpg\" earth_img = load ( Downloads . download ( link )) function SphereTess (; o = Point3f ( 0 ), r = 1 , tess = 64 ) return uv_normal_mesh ( Tesselation ( Sphere ( o , r ), tess )) end function ssaoplanes () fig = Figure () ax = LScene ( fig [ 1 , 1 ]; show_axis = false , scenekw = ( SSAO = ( radius = 6.0 , blur = 3.5 ))) ax . scene . ssao . bias [] = 0.025 mesh! ( ax , SphereTess (; o = Point3f ( 0.1 , 0 , 0 ), r = 0.95 ); color = circshift ( earth_img , ( 0 , 3000 )), ssao = true ) # box mesh! ( ax , Rect3 ( Vec3f ( - 1 , - 1 , - 1.1 ), Vec3f ( 2 , 2 , 0.1 )); color = RGB ( 0.082 , 0.643 , 0.918 ), ssao = true ) mesh! ( ax , Rect3 ( Vec3f ( - 1 , - 1.1 , - 1.1 ), Vec3f ( 2 , 0.1 , 2.1 )); color = RGB ( 0.929 , 0.773 , 0.0 ), ssao = true ) mesh! ( ax , Rect3 ( Vec3f ( - 1 , - 1 , - 1.0 ), Vec3f ( 0.1 , 2 , 2.0 )); color = RGB ( 0.91 , 0.122 , 0.361 ), ssao = true ) fig end fig = with_theme ( ssaoplanes , theme_dark ()) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"Colors\" , \"GeometryBasics\" , \"LinearAlgebra\" , \"Downloads\" , \"FileIO\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5ae59095] Colors v0.12.8 [5789e2e9] FileIO v1.15.0 [e9467ef8] GLMakie v0.6.13 \u2303 [5c1252a2] GeometryBasics v0.4.2 [37e2e46d] LinearAlgebra Info Packages marked with \u2303 have new versions available This page was generated using Literate.jl .","title":"Earth and planes"},{"location":"examples/generated/2d/meshes/meshes/","text":"using GLMakie , Random , Colors , LinearAlgebra using GeometryBasics : Cylinder , Pyramid using Makie import GeometryBasics Random . seed! ( 3 ) cyl = Cylinder ( Point { 3 , Float64 }( 1 , 2 , 3 ), Point { 3 , Float64 }( 2 , 3 , 4 ), 1.0 ) pyr = Pyramid ( Point3f ( 0 ), 1f0 , 1f0 ) rectmesh = Rect3 ( Point3f ( - 0.5 ), Vec3f ( 1 )) rectthin = Rect3 ( Point3f ( - 1 ), Vec3f ( 2 , 2 , 0.25 )) sphere = Sphere ( Point3f ( - 0.5 ), 1 ) Cone (; quality = 10 ) = merge ([ Makie . _circle ( Point3f ( 0 ), 0.5f0 , Vec3f ( 0 , 0 , - 1 ), quality ), Makie . _mantle ( Point3f ( 0 ), Point3f ( 0 , 0 , 1 ), 0.5f0 , 0f0 , quality )]) cone = Cone () rectMesh = GeometryBasics . mesh ( rectmesh ) rectThin = GeometryBasics . mesh ( rectthin ) cyL = GeometryBasics . mesh ( cyl ) cmap = resample_cmap ( :Spectral_11 , length ( rectMesh . position )) colors1 = [ cmap [ i ] for ( i , v ) in enumerate ( rectMesh . position )] colors2 = [ RGBA ( rand ( 4 ) ... ) for v in rectThin . position ] colors3 = [ norm ( v ) for v in cyL . position ] markers = [ sphere , rectmesh , cyl , pyr , cone ] with_theme ( theme_dark ()) do fig = Figure ( resolution = ( 1200 , 800 )) axs = [ Axis3 ( fig [ i , j ]; aspect = :data , perspectiveness = 0.5 ) for j in 1 : 3 , i in 1 : 2 ] mesh! ( axs [ 1 ], sphere , color = :white ) mesh! ( axs [ 2 ], rectmesh , color = colors1 ) mesh! ( axs [ 3 ], pyr ; color = ( :dodgerblue , 0.85 )) wireframe! ( axs [ 3 ], pyr ; color = :grey90 ) mesh! ( axs [ 4 ], cyl ; color = colors3 , colormap = :diverging_tritanopic_cwr_75_98_c20_n256 ) mesh! ( axs [ 5 ], cone ; transparency = true ) wireframe! ( axs [ 5 ], cone ; color = :grey90 , linewidth = 0.5 ) mesh! ( axs [ 6 ], rectthin ; color = colors2 , shading = false ) [ meshscatter! ( axs [ 6 ], Point3f ( 1.5 rand ( 3 ) .- 0.5 ); marker = markers [ i ], markersize = 0.25 ) for i in 1 : 5 ] fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"Makie\" , \"GLMakie\" , \"Colors\" , \"GeometryBasics\" , \"LinearAlgebra\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5ae59095] Colors v0.12.8 [e9467ef8] GLMakie v0.6.13 \u2303 [5c1252a2] GeometryBasics v0.4.2 [ee78f7c6] Makie v0.17.13 [37e2e46d] LinearAlgebra Info Packages marked with \u2303 have new versions available This page was generated using Literate.jl .","title":"Meshes: Cylinder, Pyramid, Sphere, Rect3"},{"location":"examples/generated/2d/mscatters/RGBAcube/","text":"using GLMakie , Colors using GeometryBasics : Rect3f GLMakie . activate! () positions = vec ([ Point3f ( i / 5 , j / 5 , k / 5 ) for i = 1 : 7 , j = 1 : 7 , k = 1 : 7 ]) ## note 7 > 5 [factor in each i,j,k], whichs is misleading fig , ax , obj = meshscatter ( positions ; marker = Rect3f ( Vec3f ( - 0.5 ), Vec3f ( 1.8 )), transparency = true , color = [ RGBA ( positions [ i ] ... , 0.5 ) for i in eachindex ( positions )], figure = (; resolution = ( 1200 , 800 )) ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"GeometryBasics\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 \u2303 [5c1252a2] GeometryBasics v0.4.2 Info Packages marked with \u2303 have new versions available This page was generated using Literate.jl .","title":"RGBA cube"},{"location":"examples/generated/2d/mscatters/RRGraph3D/","text":"# Adaptation from: # L Alonso, et. al. https://doi.org/10.1093/comnet/cnx053 using LinearAlgebra , Random , GLMakie GLMakie . activate! () function RRGAdjacencyM3D (; radius = 0.17 , nodes = 500 , rseed = 123 ) Random . seed! ( rseed ) xy = rand ( nodes , 3 ) x = xy [ : , 1 ] y = xy [ : , 2 ] z = xy [ : , 3 ] matrixAdjDiag = Diagonal ( \u221a 2 * randn ( nodes )) matrixAdj = zeros ( nodes , nodes ) for point in 1 : nodes - 1 xseps = ( x [ point + 1 : end ] .- x [ point ]) .^ 2 yseps = ( y [ point + 1 : end ] .- y [ point ]) .^ 2 zseps = ( z [ point + 1 : end ] .- z [ point ]) .^ 2 distance = sqrt . ( xseps .+ yseps .+ zseps ) dindx = findall ( distance .<= radius ) .+ point if length ( dindx ) > 0 rnd = randn ( length ( dindx )) matrixAdj [ point , dindx ] = rnd matrixAdj [ dindx , point ] = rnd end end return ( matrixAdj .+ matrixAdjDiag , x , y , z ) end adjacencyM3D , x , y , z = RRGAdjacencyM3D () function getGraphEdges3D ( adjMatrix3D , x , y , z ) xyzos = [] weights = [] for i in eachindex ( x ), j in i + 1 : length ( x ) if adjMatrix3D [ i , j ] != 0.0 push! ( xyzos , [ x [ i ], y [ i ], z [ i ]]) push! ( xyzos , [ x [ j ], y [ j ], z [ j ]]) push! ( weights , adjMatrix3D [ i , j ]) push! ( weights , adjMatrix3D [ i , j ]) end end return ( Point3f . ( xyzos ), Float32 . ( weights )) end function plotGraph3D ( adjacencyM3D , x , y , z ) cmap = ( :Hiroshige , 0.75 ) adjmin = minimum ( adjacencyM3D ) adjmax = maximum ( adjacencyM3D ) diagValues = diag ( adjacencyM3D ) segm , weights = getGraphEdges3D ( adjacencyM3D , x , y , z ) fig , ax , pltobj = linesegments ( segm ; color = weights , colormap = cmap , linewidth = abs . ( weights ), colorrange = ( adjmin , adjmax ), figure = (; resolution = ( 1200 , 800 ), fontsize = 24 ), axis = (; type = Axis3 , aspect = ( 1 , 1 , 1 ), perspectiveness = 0.5 )) meshscatter! ( ax , x , y , z ; color = diagValues , markersize = abs . ( diagValues ) ./ 90 , colorrange = ( adjmin , adjmax ), colormap = cmap ) Colorbar ( fig [ 1 , 2 ], pltobj , label = \"weights\" , height = Relative ( 0.5 )) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig end with_theme ( theme_dark ()) do plotGraph3D ( adjacencyM3D , x , y , z ) end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"LinearAlgebra\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 [37e2e46d] LinearAlgebra This page was generated using Literate.jl .","title":"Weighted random-geometric Graph 3D"},{"location":"examples/generated/2d/mscatters/SSAO_meshscatter/","text":"# from https://makie.juliaplots.org/v0.15/documentation/lighting/#examples using GLMakie , Colors , LinearAlgebra using Random : seed! seed! ( 1313 ) GLMakie . enable_SSAO [] = true GLMakie . closeall () # close any open screen function ssaom () positions = [ Point3f ( x , y , rand ()) for x in - 7 : 7 for y in - 5 : 5 ] fig = Figure ( resolution = ( 1200 , 800 )) ax = LScene ( fig [ 1 , 1 ]; show_axis = false , scenekw = ( SSAO = ( radius = 6.0 , blur = 3.5 ))) ax . scene . ssao . bias [] = 0.025 meshscatter! ( ax , positions ; marker = Rect3 ( Point3f ( - 0.5 ), Vec3f ( 1 )), markersize = 1 , color = norm . ( positions ), colormap = Reverse ( :tol_light ), ssao = true ) zoom! ( ax . scene , cameracontrols ( ax . scene ), 0.65 ) fig end fig = ssaom () Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"Colors\" , \"LinearAlgebra\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5ae59095] Colors v0.12.8 [e9467ef8] GLMakie v0.6.13 [37e2e46d] LinearAlgebra This page was generated using Literate.jl .","title":"Screen-Space Ambient Occlusion, SSAO"},{"location":"examples/generated/2d/mscatters/SSAO_mgrid/","text":"using GLMakie GLMakie . enable_SSAO [] = true GLMakie . closeall () # close any open screen x = y = z = 1 : 10 f ( x , y , z ) = x ^ 2 + y ^ 2 + z ^ 2 positions = vec ([( i , j , k ) for i in x , j in y , k in z ]) vals = [ f ( ix , iy , iz ) for ix in x , iy in y , iz in z ] function ssaomeshscatter () colormap = :starrynight fig = Figure ( resolution = ( 1800 , 600 )) ax11 = LScene ( fig [ 1 , 1 ]; show_axis = false , scenekw = ( SSAO = ( radius = 6.0 , blur = 3.5 ))) ax11 . scene . ssao . bias [] = 0.025 ax12 = LScene ( fig [ 1 , 2 ]; show_axis = false , scenekw = ( SSAO = ( radius = 6.0 , blur = 3.5 ))) ax13 = LScene ( fig [ 1 , 3 ]; show_axis = false , scenekw = ( SSAO = ( radius = 6.0 , blur = 3.5 ))) meshscatter! ( ax11 , positions , color = vec ( vals ), marker = Rect3f ( Vec3f ( - 0.5 ), Vec3f ( 1 )), markersize = 0.9 , colormap = ( colormap , 0.5 ), colorrange = ( minimum ( vals ), maximum ( vals )), backlight = 4.0f0 , ssao = true , ) meshscatter! ( ax12 , positions ; color = vec ( vals ), marker = Rect3f ( Vec3f ( - 0.5 ), Vec3f ( 1 )), markersize = 0.9 , colormap , colorrange = ( minimum ( vals ), maximum ( vals )), ssao = true ) meshscatter! ( ax13 , positions ; color = vec ( vals ), marker = Rect3f ( Vec3f ( - 0.5 ), Vec3f ( 1 )), markersize = 0.9 , colormap , colorrange = ( minimum ( vals ), maximum ( vals )), backlight = 2.0f0 , ssao = true , transparency = true ) zoom! ( ax11 . scene , cameracontrols ( ax11 . scene ), 1.2 ) zoom! ( ax12 . scene , cameracontrols ( ax12 . scene ), 1.2 ) zoom! ( ax13 . scene , cameracontrols ( ax13 . scene ), 1.2 ) fig end with_theme ( ssaomeshscatter , theme_dark ()) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"SSAO: meshscatter grid"},{"location":"examples/generated/2d/mscatters/cube_mscatters/","text":"using GLMakie , ColorSchemes using GeometryBasics : Rect3f GLMakie . activate! () x = y = z = 1 : 10 f ( x , y , z ) = x ^ 2 + y ^ 2 + z ^ 2 positions = vec ([( i , j , k ) for i in x , j in y , k in z ]) vals = [ f ( ix , iy , iz ) for ix in x , iy in y , iz in z ] m = Rect3f ( Vec3f ( - 0.5 ), Vec3f ( 1 )) fig , ax , pltobj = meshscatter ( positions ; color = vec ( vals ), marker = m , markersize = 0.9 , colormap = ( :Egypt , 0.75 ), colorrange = ( minimum ( vals ), maximum ( vals )), transparency = true , shading = false , figure = (; resolution = ( 1200 , 800 ) ), axis = (; type = Axis3 , perspectiveness = 0.5 , azimuth = 2.19 , elevation = 0.57 , xlabel = \"x label\" , ylabel = \"y label\" , zlabel = \"z label\" , aspect = ( 1 , 1 , 1 )) ) Colorbar ( fig [ 1 , 2 ], pltobj ; label = \"f values\" , height = Relative ( 0.5 )) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) limits! ( ax , - 1 , 11 , - 1 , 11 , - 1 , 11 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"GeometryBasics\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [35d6a980] ColorSchemes v3.19.0 [e9467ef8] GLMakie v0.6.13 \u2303 [5c1252a2] GeometryBasics v0.4.2 Info Packages marked with \u2303 have new versions available This page was generated using Literate.jl .","title":"Cube: meshscatters"},{"location":"examples/generated/2d/mscatters/gauss2d/","text":"using GLMakie , Random GLMakie . activate! () Random . seed! ( 13 ) x = - 6 : 0.5 : 6 y = - 6 : 0.5 : 6 z = 6 exp . ( - ( x .^ 2 .+ y ' .^ 2 ) ./ 4 ) box = Rect3 ( Point3f ( - 0.5 ), Vec3f ( 1 )) n = 100 g ( x ) = x ^ ( 1 / 10 ) alphas = [ g ( x ) for x in range ( 0 , 1 , length = n )] cmap_alpha = resample_cmap ( :linear_worb_100_25_c53_n256 , n , alpha = alphas ) with_theme ( theme_dark ()) do fig , ax , = meshscatter ( x , y , z ; marker = box , markersize = 0.5 , color = vec ( z ), colormap = cmap_alpha , colorrange = ( 0 , 6 ), axis = (; type = Axis3 , aspect = :data , azimuth = 7.3 , elevation = 0.189 , perspectiveness = 0.5 ), figure = (; resolution = ( 1200 , 800 ))) meshscatter! ( ax , x .+ 7 , y , z ./ 2 ; markersize = 0.25 , color = vec ( z ./ 2 ), colormap = cmap_alpha , colorrange = ( 0 , 6 ), ambient = Vec3f ( 0.85 , 0.85 , 0.85 ), backlight = 1.5f0 ) xlims! ( - 5.5 , 10 ) ylims! ( - 5.5 , 5.5 ) hidedecorations! ( ax ; grid = false ) hidespines! ( ax ) fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Gauss-like shapes 2d"},{"location":"examples/generated/2d/poly/poly_ngon/","text":"using CairoMakie , CairoMakie . GeometryBasics n = 20 function ngonShape ( h , k , r , n ) Polygon ([ Point2f ( h .+ r * sin . ( m * 2 \u03c0 / n ), k .+ r * cos . ( m * 2 \u03c0 / n )) for m in 1 : n ]) end polysCentric = [ ngonShape ( 0 , 0 , 3 / i ^ 1.5 , i ) for i in 3 : n ] polysCircular = [ ngonShape ( \u221a 2 / 2 * sin ( \u03b8 ), \u221a 2 / 2 * cos ( \u03b8 ), 0.15 /\u221a idx , idx + 2 ) for ( idx , \u03b8 ) in enumerate ( LinRange ( 0 , 2 \u03c0 * ( 1 - 1 / ( n - 2 )), n - 2 ))] cmap = resample_cmap ( :linear_protanopic_deuteranopic_kbw_5_98_c40_n256 , 100 )[ 3 : end ] with_theme ( theme_black ()) do fig , ax , = poly ( polysCentric ; color = 1 : n - 2 , colormap = cmap , axis = (; aspect = DataAspect ()), figure = (; resolution = ( 600 , 400 ))) poly! ( polysCircular ; color = 1 : n - 2 , colormap = cmap ) hidedecorations! ( ax ; grid = false ) hidespines! ( ax ) fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Poygons: ngon"},{"location":"examples/generated/2d/rpr/sphere_plane/","text":"Info Transfering examples from here https://github.com/lazarusA/RPRMakieNotes #= !!! using GLMakie, GeometryBasics using RPRMakie, RadeonProRender using LinearAlgebra, Colors, FileIO # background/sky color img = [colorant\"grey90\" for i in 1:1, j in 1:1] # color as an array/image, hence a normal image also works lights = [EnvironmentLight(1.0, img'), PointLight(Vec3f(2,0,2.0), RGBf(8.0, 6.0, 5.0))] # custom Tesselation over an Sphere function SphereTess(; o=Point3f(0), r=1, tess=64) return uv_normal_mesh(Tesselation(Sphere(o, r), tess)) end plane = Rect3f(Vec3f(-5,-2,-1.05), Vec3f(10,4,0.05)) # the actual figure fig=Figure(; resolution=(900, 900)) ax=LScene(fig[1, 1]; show_axis=false, scenekw=(;lights=lights)) screen=RPRMakie.RPRScreen(size(ax.scene); plugin=RPR.Northstar, iterations=250) matsys=screen.matsys mesh!(ax, SphereTess(); color=RGB(0.082, 0.643, 0.918), material=RPR.DiffuseMaterial(matsys)) mesh!(ax, plane; color=:gainsboro, material=RPR.DiffuseMaterial(matsys)) GLMakie.activate!() zoom!(ax.scene, cameracontrols(ax.scene), 0.22) display(fig) context, task = RPRMakie.replace_scene_rpr!(ax.scene, screen) nothing # avoid printing stuff into the repl imageOut = colorbuffer(screen) # save(\"SpherePlaneSky.png\", imageOut) # save just screen scene. =# Warning This only works under windows and linux. This page was generated using Literate.jl .","title":"Sphere and plane"},{"location":"examples/generated/2d/scatterlines/markers/","text":"using CairoMakie x = LinRange ( 0 , 2 \u03c0 , 50 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" ) scatterlines! ( x , sin . ( x ), color = :black , label = \"sin(x)\" , marker = '\u25c6' , markersize = 10 ) scatterlines! ( x , cos . ( x ), color = :black , label = \"cos(x)\" , marker = '\u25a0' , markercolor = :red , markersize = 10 , strokewidth = 1 , strokecolor = :red ) axislegend (; position = :cc ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Markers "},{"location":"examples/generated/2d/scatterlines/scatterls_line/","text":"using CairoMakie x = LinRange ( 0 , 2 \u03c0 , 50 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" ) lines! ( x , sin . ( x ); color = :red , label = \"sin(x)\" ) scatterlines! ( x , cos . ( x ); color = :blue , label = \"cos(x)\" , markercolor = :black , markersize = 10 ) scatter! ( x , - cos . ( x ); color = :red , label = \"-cos(x)\" , strokewidth = 1 , strokecolor = :red , markersize = 5 , marker = '\u25a0' ) axislegend (; position = :lt , bgcolor = ( :white , 0.85 ), framecolor = :green ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Scatterlines and lines"},{"location":"examples/generated/2d/scatterlines/scatterls_line_leg_out/","text":"using CairoMakie x = LinRange ( 0 , 2 \u03c0 , 50 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" ) lines! ( x , sin . ( x ), color = :red , label = \"sin(x)\" ) scatterlines! ( x , cos . ( x ), color = :blue , label = \"cos(x)\" , markersize = 5 ) scatter! ( x , - cos . ( x ), color = :red , label = \"-cos(x)\" , strokewidth = 1 , strokecolor = :red , markersize = 5 , marker = '\u25a0' ) Legend ( fig [ 1 , 2 ], ax , merge = true ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Scatterlines and lines: Legend out"},{"location":"examples/generated/2d/scatterlines/simple/","text":"using CairoMakie x = LinRange ( 0 , 2 \u03c0 , 50 ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"\" ) scatterlines! ( x , sin . ( x ); color = :black , markersize = 10 , label = \"sin(x)\" ) axislegend () fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Sine"},{"location":"examples/generated/2d/scatterlines/spirals/","text":"using CairoMakie n = 50 t = range ( 0 , 5 * \u03c0 , n ) x ( t ; a = 0.0 , b = - 2.4 ) = ( a + b * t ) * cos ( t ) y ( t ; a = 0.0 , b = - 2.4 ) = ( a + b * t ) * sin ( t ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; aspect = DataAspect (), xlabel = \"x\" , ylabel = \"y\" ) for ( k , i ) in enumerate ( - 4 :- 2 ) scatterlines! ( x . ( t ; b = i ), y . ( t ; b = i )) end fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Spirals "},{"location":"examples/generated/2d/scatters/bubble_plot/","text":"using CairoMakie , Random Random . seed! ( 124 ) n = 30 x , y , z = randn ( n ), randn ( n ), randn ( n ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; xgridstyle = :dashdot , ygridstyle = :dashdot , xtickalign = 1 , ytickalign = 1 ) pts1 = scatter! ( ax , 10 x , y ; color = z , colormap = ( :viridis , 0.75 ), markersize = 20 z , marker = :rect ) pts2 = scatter! ( ax , 3 x , 5 y ; color = z , colormap = ( :thermal , 0.85 ), markersize = 45 z , marker = :circle ) Colorbar ( fig [ 1 , 2 ], pts1 , label = \"z1 value\" , ticklabelsize = 14 , labelpadding = 5 , width = 10 ) Colorbar ( fig [ 1 , 3 ], pts2 , label = \"z2 value\" , ticklabelsize = 14 , labelpadding = 5 , width = 10 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Bubble plot"},{"location":"examples/generated/2d/scatters/bubble_plot_logxy/","text":"using CairoMakie , Random , Colors Random . seed! ( 123 ) x = 10 .^ ( range ( - 1 , stop = 1 , length = 100 )) y = x .^ 2 .+ abs . ( 2 * randn ( length ( x ))) cmap = cgrad ( :viridis , scale = :log , alpha = 0.5 ) fig , ax , pltpbj = scatter ( x , y ; markersize = ( x .^ 2 / 3 )[ end :- 1 : 1 ] .+ 6 , color = x , colormap = cmap , figure = (; resolution = ( 600 , 400 ), font = \"CMU Serif\" ), axis = (; xscale = log10 , yscale = log10 , xlabel = \"x\" , ylabel = \"y\" , xgridstyle = :dash , ygridstyle = :dash , xminorticksvisible = true , yminorticksvisible = true , xminorticks = IntervalsBetween ( 9 ), yminorticks = IntervalsBetween ( 9 ))) Colorbar ( fig [ 1 , 2 ], pltpbj ) ylims! ( ax , 1e-1 , 1e2 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"Colors\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [5ae59095] Colors v0.12.8 This page was generated using Literate.jl .","title":"Bubble plot logxy"},{"location":"examples/generated/2d/scatters/iris_dataset/","text":"using CairoMakie , RDatasets , Random , Colors Random . seed! ( 123 ) dset = dataset ( \"datasets\" , \"iris\" ) byCat = dset . Species categ = unique ( byCat ) markers = [ :circle , :diamond , :utriangle ] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"Sepal Length\" , ylabel = \"Sepal Width\" ) for ( idx , c ) in enumerate ( categ ) indices = findall ( x -> x == c , byCat ) scatter! ( dset . SepalLength [ indices ], dset . SepalWidth [ indices ]; marker = markers [ idx ], color = rand ( RGBf ), markersize = 15 , label = \" $ ( c ) \" ) end axislegend ( \"Species\" ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"RDatasets\" , \"Colors\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [5ae59095] Colors v0.12.8 [ce6b1742] RDatasets v0.7.7 This page was generated using Literate.jl .","title":"Iris dataset"},{"location":"examples/generated/2d/scatters/makie_contributors/","text":"using GLMakie , GitHub , Downloads , FileIO function getavatars (; n = 90 ) contri = GitHub . contributors ( \"JuliaPlots/Makie.jl\" )[ 1 ] avatars = [] contributions = [] for i in eachindex ( contri ) push! ( avatars , contri [ i ][ \"contributor\" ] . avatar_url . uri ) push! ( contributions , contri [ i ][ \"contributions\" ]) end p = sortperm ( contributions , rev = true ) imgs = [] for i in p [ 1 : n ] img_d = Downloads . download ( avatars [ i ]) push! ( imgs , load ( img_d )) end return imgs end avatars = getavatars () function plotcontributors () fig = Figure (; resolution = ( 1200 , 600 )) ax = Axis ( fig [ 1 , 1 ], aspect = DataAspect ()) k = 1 for i in 6 :- 1 : 1 , j in 1 : 15 scatter! ( ax , Point2f ( j , i ); marker = Circle ( Point2f ( 0 ), 0.5f0 ), image = avatars [ k ], markersize = 70 ) k += 1 end hidedecorations! . ( ax ) hidespines! . ( ax ) limits! ( ax , 0 , 16 , 0 , 7 ) fig end fig = plotcontributors () fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"GitHub\" , \"Downloads\" , \"FileIO\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [5789e2e9] FileIO v1.15.0 [e9467ef8] GLMakie v0.6.13 [bc5e4493] GitHub v5.7.3 This page was generated using Literate.jl .","title":"Makie Contributors"},{"location":"examples/generated/2d/scatters/scatter/","text":"using CairoMakie , Distributions using Random Random . seed! ( 1234 ) d = Normal () b = Binomial ( 15 , 0.7 ) n = 350 scatter ( rand ( d , n ), rand ( b , n ); markersize = 12 * abs . ( rand ( d , n )), color = tuple . ( :orangered , rand ( n )), strokewidth = 0.5 , strokecolor = :white , axis = (; xlabel = \"x\" , ylabel = \"y\" ), figure = (; resolution = ( 600 , 400 )) ) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"Distributions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [31c24e10] Distributions v0.25.70 This page was generated using Literate.jl .","title":"Scatter"},{"location":"examples/generated/2d/scatters/scatters_colormap/","text":"using CairoMakie , Random , ColorSchemes Random . seed! ( 123 ) n = 50 x , y , color = rand ( n ), rand ( n ), rand ( n ) cmaps = [ :cool , :viridis , :plasma , :inferno , :thermal , :leonardo , :winter , :spring , :ice ] markers = [ :+ , :diamond , :star4 , :rtriangle , :rect , :circle , :pentagon , :cross , :star5 ] function FigGridScatters () fig = Figure ( resolution = ( 1200 , 800 )) c = 1 for i in 1 : 2 , j in 1 : 2 : 5 ax = Axis ( fig [ i , j ], aspect = AxisAspect ( 1 )) pnts = scatter! ( x , y .^ c ; color = color , colormap = cmaps [ c ], markersize = 15 , marker = markers [ c ], strokewidth = 0 ) cbar = Colorbar ( fig , pnts , height = Relative ( 0.75 ), tickwidth = 2 , tickalign = 1 , width = 14 , ticksize = 14 ) fig [ i , j + 1 ] = cbar limits! ( ax , - 0.1 , 1.1 , - 0.1 , 1.1 ) ax . xticks = [ 0 , 1 ] ax . yticks = [ 0 , 1 ] ax . xticklabelsize = 20 ax . yticklabelsize = 20 c += 1 end fig end fig = FigGridScatters () Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 This page was generated using Literate.jl .","title":"Scatters with colormaps"},{"location":"examples/generated/2d/series/series/","text":"using CairoMakie , Random , LaTeXStrings Random . seed! ( 123 ) m = 200 function spiral (; a = 1 , n = 100 , h = 0 , k = 0 ) \u03c6 = LinRange ( rand () + 1 , 6 \u03c0 , n ) h .+ rand ( - 1 : 2 : 1 ) * a * cos . ( \u03c6 ) ./ \u03c6 , k .+ rand ( - 1 : 2 : 1 ) * a * sin . ( \u03c6 ) ./ \u03c6 end x = raw \"x=a\\,\\cos(\\varphi)/\\varphi,\\quad \" y = raw \"y=a\\,\\sin(\\varphi)/\\varphi,\\quad \" curves = [ spiral (; a = rand (), h = rand ( - 1 : 1 )) for i in 1 : m ] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]) series! ( curves ; color = resample_cmap ( :bone_1 , m ), linewidth = 1.5 ) text! ( latexstring ( x * y * \" \\\\ varphi>0\" ), position = ( - 1 , - 1 )) hidedecorations! ( ax ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"LaTeXStrings\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [b964fa9f] LaTeXStrings v1.3.0 This page was generated using Literate.jl .","title":"series"},{"location":"examples/generated/2d/stairs/stairs/","text":"using CairoMakie , SpecialFunctions p ( s , \u03b2 ) = ( \u03b2 + 1 ) * a ( \u03b2 ) * s ^ \u03b2 * exp ( - a ( \u03b2 ) * s ^ ( \u03b2 + 1 )) a ( \u03b2 ) = gamma ((( \u03b2 + 2 ) / ( \u03b2 + 1 )) ^ ( \u03b2 + 1 )) s = LinRange ( 0 , 3 , 30 ) colors = [ \"#FF410D\" , \"#6EE2FF\" , \"#F7C530\" , \"#95CC5E\" , \"#D0DFE6\" , \"#F79D1E\" ] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; palette = (; color = colors )) for \u03b2 in [ 0 , 1 ], step in [ :pre , :center , :post ] stairs! ( s , p . ( s , \u03b2 ), step = step , label = \" $ ( \u03b2 ) , : $ ( step ) \" ) end lines! ( s , p . ( s , 1 ), color = :grey30 ) lines! ( s , p . ( s , 0 ), color = :grey10 ) text! ( L \"p(s)=( \\b eta+1)a_{ \\b eta}\\,s^{ \\b eta}\\exp(-a_{ \\b eta}s^{ \\b eta+1})\" , position = ( 0.7 , 0.95 ), color = :black ) text! ( L \"a_{ \\b eta} = \\Gamma[( \\b eta+2)/( \\b eta+1)]^{ \\b eta + 1}\" , position = ( 1.7 , 0.25 ), color = :black ) axislegend ( \"\u03b2, step\" , position = :rt ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"SpecialFunctions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [276daf66] SpecialFunctions v2.1.7 This page was generated using Literate.jl .","title":"stairs"},{"location":"examples/generated/2d/stem/stem/","text":"using CairoMakie , Random Random . seed! ( 2 ) t = 0.3 : 0.3 : 3 \u03c0 my_markers = [ :circle , :rect , :utriangle , :dtriangle , :diamond , :pentagon , :cross , :xcross ] fig , ax , = stem ( t , 1.5 exp . ( - t / 5 ) .* cos . ( t ); color = 1 : length ( t ), colormap = :linear_wyor_100_45_c55_n256 , stemcolor = 1 : length ( t ), stemcolormap = :linear_wcmr_100_45_c42_n256 , figure = (; resolution = ( 600 , 400 ))) stem! ( t .+ 0.15 , - cos . ( t ) ./ t .+ 0.25 ; color = :transparent , stemwidth = 0.5 , marker = :rect , markersize = 10 , strokewidth = 1 , strokecolor = :black ) stem! ( 1 : 8 , 1.5 randn ( 8 ); marker = my_markers , color = tuple . ( resample_cmap ( :mk_12 , 8 ), 0.65 ), stemlinestyle = :dash , stemcolor = resample_cmap ( :mk_12 , 8 ), markersize = 15 * rand ( 8 ) .+ 10 , strokewidth = 1.5 , strokecolor = resample_cmap ( :mk_12 , 8 )) hidedecorations! ( ax ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"stem"},{"location":"examples/generated/2d/streamplot/complex_polya_field/","text":"using CairoMakie x = y = - 2 : 0.005 : 2 f ( z ) = 1 / ( z * ( z ^ 2 - z - 1 - 3 im )) fvals = [ f ( u + 1 im * v ) for u in x , v in y ] fvalues = abs . ( fvals ) fargs = angle . ( fvals ) polya ( x , y ) = Point2f ( real ( f ( x + 1 im * y )), - imag ( f ( x + 1 im * y ))) fig = Figure ( resolution = ( 900 , 400 )) axs = [ Axis ( fig [ 1 , i ], aspect = 1 ) for i in 1 : 2 ] cmap = :roma streamplot! ( axs [ 1 ], polya , - 2 .. 2 , - 2 .. 2 , colormap = [ :black , :red ], gridsize = ( 40 , 40 ), arrow_size = 6 , linewidth = 1 ) pltobj2 = heatmap! ( axs [ 2 ], x , y , fargs , colorrange = ( - \u03c0 , \u03c0 ), colormap = cmap ) streamplot! ( axs [ 2 ], polya , - 2 .. 2 , - 2 .. 2 , colormap = [ :black , :black ], gridsize = ( 40 , 40 ), arrow_size = 6 , linewidth = 1 ) Colorbar ( fig [ 1 , 3 ], pltobj2 , ticks = ([ - \u03c0 , - \u03c0 / 2 , 0 , \u03c0 / 2 , \u03c0 ], [ L \"-\\pi\" , L \"-\\pi/2\" , L \"0\" , L \"\\pi/2\" , L \"\\pi\" ])) limits! ( axs [ 1 ], - 2 , 2 , - 2 , 2 ) limits! ( axs [ 2 ], - 2 , 2 , - 2 , 2 ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) colsize! ( fig . layout , 2 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Complex Polya Field"},{"location":"examples/generated/2d/streamplot/field_heatmap/","text":"using CairoMakie testField ( x , y ) = Point2f ( - x , 2 y ) # x'(t) = -x, y'(t) = 2y x = - 2 : 0.1 : 4 y = - 2 : 0.1 : 2 u2 ( x , y ) = - x v2 ( x , y ) = 2 y z = [ log10 ( sqrt ( u2 ( x , y ) ^ 2 + v2 ( x , y ) ^ 2 )) for x in x , y in y ] fig = Figure ( resolution = ( 600 , 400 ), fontsize = 22 , font = \"CMU Serif\" ) ax = fig [ 1 , 1 ] = Axis ( fig , xlabel = L \"x\" , ylabel = L \"y\" ) fs = heatmap! ( ax , x , y , z , colormap = Reverse ( :plasma )) streamplot! ( ax , testField , x , y , colormap = Reverse ( :plasma ), gridsize = ( 32 , 32 ), arrow_size = 10 ) Colorbar ( fig [ 1 , 2 ], fs , label = L \"\\log_{10}[(u^2+v^2)^{1/2}]\" , width = 20 , labelsize = 14 , ticklabelsize = 14 ) colgap! ( fig . layout , 5 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"field heatmap"},{"location":"examples/generated/2d/streamplot/ode_solution/","text":"using CairoMakie odeSol ( x , y ) = Point2f ( - x , 2 y ) # x'(t) = -x, y'(t) = 2y fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"x\" , ylabel = \"y\" , backgroundcolor = :black ) streamplot! ( ax , odeSol , - 2 .. 4 , - 2 .. 2 , colormap = Reverse ( :plasma ), gridsize = ( 32 , 32 ), arrow_size = 10 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"ode solution"},{"location":"examples/generated/2d/streamplot/poincare_vander/","text":"using CairoMakie nonStablePoincare ( x , y ) = Point2f ( x * ( x ^ 2 + y ^ 2 - 1 ) - y * ( x ^ 2 + y ^ 2 + 1 ), y * ( x ^ 2 + y ^ 2 - 1 ) + x * ( x ^ 2 + y ^ 2 + 1 )) stableVanDerPaul ( x , y ) = Point2f ( y , ( 1 - x ^ 2 ) * y - x ) semiStable ( x , y ) = Point2f ( - y + x * ( - 1 + x ^ 2 + y ^ 2 ) ^ 2 , x + y * ( - 1 + x ^ 2 + y ^ 2 ) ^ 2 ) titles = [ \"non-stable\" , \"stable\" , \"semi-stable\" ] functions = [ nonStablePoincare , stableVanDerPaul , semiStable ] cmaps = [ :plasma , :viridis , :gnuplot2 ] fig = Figure ( resolution = ( 1800 , 600 ), fontsize = 24 ) axs = [ Axis ( fig [ 1 , i ], xlabel = \"x\" , ylabel = \"y\" , title = titles [ i ], aspect = 1 , backgroundcolor = :black ) for i in 1 : 3 ] [ streamplot! ( axs [ i ], functions [ i ], - 4 .. 4 , - 4 .. 4 , colormap = Reverse ( cmaps [ i ]), gridsize = ( 32 , 32 ), arrow_size = 10 ) for i in 1 : 3 ] [ hideydecorations! ( axs [ 2 ], grid = false , ticks = false ) for i in 2 : 3 ] [ limits! ( axs [ i ], - 4 , 4 , - 4 , 4 ) for i in 1 : 3 ] fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Poincare - Van der Paul"},{"location":"examples/generated/2d/streamplot/streamplot/","text":"using CairoMakie , LinearAlgebra function E ( q , rx , ry , x , y ) d = sqrt (( x - rx ) ^ 2 + ( y - ry ) ^ 2 ) ^ 3 return ( q * ( x - rx ) / d , q * ( y - ry ) / d ) end function charges (; nq = 2 ) qs = [] for i in 1 : nq q = i % 2 * 2 - 1 push! ( qs , ( q , cos ( 2 \u03c0 * i / nq ), sin ( 2 \u03c0 * i / nq ))) end qs end function fieldE ( x , y ) Ex , Ey = 0 , 0 for q in qs ex , ey = E ( q ... , x , y ) Ex += ex Ey += ey end Point ( Ex , Ey ) end fig = Figure ( resolution = ( 600 , 400 )) ax1 = Axis ( fig [ 1 , 1 ]; aspect = DataAspect ()) ax2 = Axis ( fig [ 1 , 2 ]; aspect = DataAspect ()) qs = charges () streamplot! ( ax1 , fieldE , - 2 .. 2 , - 2 .. 2 ; arrow_size = 6 , linewidth = 0.5 , colorrange = ( - 3 , 3 ), colormap = ([ :black , :black , :orange , :red ])) [ scatter! ( ax1 , Point ( qs [ i ][ 2 : 3 ]), color = qs [ i ][ 1 ] > 0 ? :red : :dodgerblue , markersize = 10 ) for i in eachindex ( qs )] qs = charges (; nq = 4 ) streamplot! ( ax2 , fieldE , - 2 .. 2 , - 2 .. 2 ; arrow_size = 6 , linewidth = 0.5 , colorrange = ( - 3 , 3 ), colormap = ([ :black , :black , :orange , :red ])) [ scatter! ( ax2 , Point ( qs [ i ][ 2 : 3 ]), color = qs [ i ][ 1 ] > 0 ? :red : :dodgerblue , markersize = 10 ) for i in eachindex ( qs )] limits! ( ax2 , - 2 , 2 , - 2 , 2 ) hidedecorations! ( ax1 ; grid = false ) hidedecorations! ( ax2 ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"LinearAlgebra\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [37e2e46d] LinearAlgebra This page was generated using Literate.jl .","title":"Field lines: Electric charges"},{"location":"examples/generated/2d/surfaces/band3d/","text":"using GLMakie , LaTeXStrings , SpecialFunctions , Random GLMakie . activate! () Random . seed! ( 13 ) with_theme ( theme_black ()) do fig = Figure ( resolution = ( 1200 , 800 )) ax = Axis3 ( fig ; aspect = ( 1 , 0.5 , 0.5 ), azimuth = 10.42 , elevation = 0.027 , perspectiveness = 0.5 ) x = 0 : 0.1 : 15 y = - 1 : 0.1 : 7 horizontal = Point3f . ( tuple . ( 15 , y , 3 exp . ( - ( y .- 3 ) .^ 2 / 3 ))) for \u03bd in 0 : 7 lines! ( ax , x , x * 0 .+ \u03bd , besselj . ( \u03bd , x ) .+ \u03bd / 3 ; linewidth = 2 , color = :grey90 , label = latexstring ( \"J_{ $ ( \u03bd ) }(x)\" )) band! ( ax , Point3f . ( tuple . ( x , \u03bd , \u03bd / 3 )), Point3f . ( tuple . ( x , \u03bd , besselj . ( \u03bd , x ) .+ \u03bd / 3 )); color = 1 : length ( x ), colormap = :plasma ) text! ( ax , latexstring ( \"J_{ $ ( \u03bd ) }(x)\" ), position = Point3f ( 15.2 , \u03bd , \u03bd / 3 )) end band! ( ax , Point3f . ( tuple . ( 0 , y , 0.0 )), Point3f . ( tuple . ( 0 , y , 3 exp . ( - ( y .- 3 ) .^ 2 / 3 ))); color = rand ( length ( y ))) band! ( ax , horizontal [ 1 : 40 ], reverse ( horizontal [ 42 : end ]); color = 1 : 40 , colormap = :bone_1 ) lines! ( ax , horizontal ; color = :white , linewidth = 2 ) hidedecorations! ( ax ; grid = false ) fig [ 1 , 1 ] = ax fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"LaTeXStrings\" , \"SpecialFunctions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 [b964fa9f] LaTeXStrings v1.3.0 [276daf66] SpecialFunctions v2.1.7 This page was generated using Literate.jl .","title":"Band 3D plane surface"},{"location":"examples/generated/2d/surfaces/branching/","text":"using GLMakie GLMakie . activate! () t = 0 : 0.1 : 15 u = - 1 : 0.1 : 1 x = [ u * sin ( t ) for t in t , u in u ] y = [ u * cos ( t ) for t in t , u in u ] z = [ t / 4 for t in t , u in u ] fig = surface ( x , y , z ; colormap = [ :orangered , :orangered ], lightposition = Vec3f ( 0 , 0 , 0 ), ambient = Vec3f ( 0.65 , 0.65 , 0.65 ), backlight = 5.0f0 , figure = (; resolution = ( 1200 , 800 ))) wireframe! ( x , y , z , overdraw = false , linewidth = 0.1 ) # try overdraw = true fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"branching"},{"location":"examples/generated/2d/surfaces/complex_function/","text":"using GLMakie GLMakie . activate! () x = - 2 : 0.005 : 2 y = - 2 : 0.005 : 2 f ( z ) = ( z ^ 2 + 1 ) / ( z ^ 2 - 1 ) fvals = [ f ( u + 1 im * v ) for u in x , v in y ] fvalues = abs . ( fvals ) fargs = angle . ( fvals ) indxCut = fvalues .> 3 fvalues [ indxCut ] .= 3.01 fig , ax , pltobj = surface ( x , y , fvalues , color = fargs , colormap = :roma , colorrange = ( - \u03c0 , \u03c0 ), backlight = 1.0f0 , highclip = :black , figure = (; resolution = ( 1200 , 800 ), fontsize = 22 )) Colorbar ( fig [ 1 , 2 ], pltobj , height = Relative ( 0.5 )) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Complex function"},{"location":"examples/generated/2d/surfaces/constraints/","text":"using GLMakie GLMakie . activate! () x = LinRange ( - 2 , 0.5 , 501 ) y = LinRange ( - 2 , 2 , 501 ); # objective function z = 100 .* ( y ' .- x .^ 2 ) .^ 2 .+ ( 1 .- x ) .^ 2 ; # build constraints zin = copy ( z ) zout1 = copy ( z ) zout2 = copy ( z ) for ( i , x ) in enumerate ( x ), ( j , y ) in enumerate ( y ) if x * y >= 1 zin [ i , j ] = NaN zout1 [ i , j ] = z [ i , j ] zout2 [ i , j ] = NaN elseif ( x + y ^ 2 ) >= 1 zin [ i , j ] = NaN zout1 [ i , j ] = NaN zout2 [ i , j ] = z [ i , j ] else zin [ i , j ] = z [ i , j ] zout1 [ i , j ] = NaN zout2 [ i , j ] = NaN end end fig = Figure ( resolution = ( 1200 , 800 ), fontsize = 22 ) ax = Axis3 ( fig [ 1 , 1 ], aspect = ( 1 , 1 , 1 ), perspectiveness = 0.5 , elevation = \u03c0 / 9 , azimuth = 0.2 \u03c0 , zgridcolor = :grey , ygridcolor = :grey , xgridcolor = :grey ) pltobj = surface! ( ax , x , y , zin ; colormap = Reverse ( :viridis )) surface! ( ax , x , y , zout1 ; colormap = [( :orangered , 0.5 ), ( :orangered , 0.5 )]) surface! ( ax , x , y , zout2 ; colormap = [( :dodgerblue , 0.5 ), ( :dodgerblue , 0.5 )]) Colorbar ( fig [ 1 , 2 ], pltobj , label = \"xy <=1 & x + y^2<=1\" , height = Relative ( 0.5 ), width = 20 ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"constraints"},{"location":"examples/generated/2d/surfaces/gabriels_horn/","text":"using GLMakie GLMakie . activate! () u = LinRange ( 0.8 , 6 , 50 ) v = LinRange ( 0 , 2 \u03c0 , 50 ) X1 = [ u for u in u , v in v ] Y1 = [( 1 / u ) * cos ( v ) for u in u , v in v ] Z1 = [( 1 / u ) * sin ( v ) for u in u , v in v ] fig = Figure ( resolution = ( 1200 , 800 )) ax = LScene ( fig [ 1 , 1 ], show_axis = false ) pltobj = surface! ( ax , - X1 , - Y1 , Z1 ; shading = true , ambient = Vec3f ( 0.65 , 0.65 , 0.65 ), backlight = 1.0f0 , color = sqrt . ( X1 .^ 2 .+ Y1 .^ 2 .+ Z1 .^ 2 ), colormap = Reverse ( :bone_1 ), transparency = true , ) wireframe! ( ax , - X1 , - Y1 , Z1 ; transparency = true , color = :gray , linewidth = 0.5 ) zoom! ( ax . scene , cameracontrols ( ax . scene ), 0.98 ) Colorbar ( fig [ 1 , 2 ], pltobj , height = Relative ( 0.5 )) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Gabriel's Horn"},{"location":"examples/generated/2d/surfaces/klein_bottle/","text":"using GLMakie GLMakie . activate! () # The bottle u = LinRange ( 0 , \u03c0 , 100 ) v = LinRange ( 0 , 2 \u03c0 , 100 ) x = [ - 2 / 15 * cos ( u ) * ( 3 * cos ( v ) - 30 * sin ( u ) + 90 * cos ( u ) ^ 4 * sin ( u ) - 60 * cos ( u ) ^ 6 * sin ( u ) + 5 * cos ( u ) * cos ( v ) * sin ( u )) for u in u , v in v ] y = [ - 1 / 15 * sin ( u ) * ( 3 * cos ( v ) - 3 * cos ( u ) ^ 2 * cos ( v ) - 48 * cos ( u ) ^ 4 * cos ( v ) + 48 * cos ( u ) ^ 6 * cos ( v ) - 60 * sin ( u ) + 5 * cos ( u ) * cos ( v ) * sin ( u ) - 5 * cos ( u ) ^ 3 * cos ( v ) * sin ( u ) - 80 * cos ( u ) ^ 5 * cos ( v ) * sin ( u ) + 80 * cos ( u ) ^ 7 * cos ( v ) * sin ( u )) for u in u , v in v ] z = [ 2 / 15 * ( 3 + 5 * cos ( u ) * sin ( u )) * sin ( v ) for u in u , v in v ] fig = Figure ( resolution = ( 1200 , 800 )) ax = LScene ( fig [ 1 , 1 ], show_axis = false ) surface! ( ax , x , y , z ; color = sqrt . ( x .^ 2 .+ y .^ 2 ), colormap = ( :Spectral_11 , 0.8 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Klein Bottle"},{"location":"examples/generated/2d/surfaces/onecolor/","text":"using GLMakie GLMakie . activate! () t = range ( 0 , 2 \u03c0 , length = 50 ) u = - 1 : 0.1 : 1 x = [ u * sin ( t ) for t in t , u in u ] y = [ u * cos ( t ) for t in t , u in u ] z = [ u for t in t , u in u ] fig = surface ( x , y , z , colormap = [ :dodgerblue , :dodgerblue ], lightposition = Vec3f ( 0 , 0 , 0.8 ), ambient = Vec3f ( 0.6 , 0.6 , 0.6 ), backlight = 2.0f0 ) wireframe! ( x , y , z ; overdraw = false , linewidth = 0.1 ) # try overdraw = true fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"One colour"},{"location":"examples/generated/2d/surfaces/revolution_surface/","text":"using GLMakie GLMakie . activate! () u = LinRange ( 0 , 1 , 50 ) v = LinRange ( 0 , 2 \u03c0 , 50 ) X1 = [ u for u in u , v in v ] Y1 = [( u ^ 4 - u ^ 2 ) * cos ( v ) for u in u , v in v ] Z1 = [( u ^ 4 - u ^ 2 ) * sin ( v ) for u in u , v in v ] fig , ax , pltobj = surface ( X1 , Y1 , Z1 ; shading = true , ambient = Vec3f ( 0.65 , 0.65 , 0.65 ), backlight = 1.0f0 , color = sqrt . ( X1 .^ 2 .+ Y1 .^ 2 .+ Z1 .^ 2 ), colormap = :viridis , transparency = true , figure = (; resolution = ( 1200 , 800 ), fontsize = 22 )) Colorbar ( fig [ 1 , 2 ], pltobj , height = Relative ( 0.5 )) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Revolution surface"},{"location":"examples/generated/2d/surfaces/revolution_surface_s/","text":"using GLMakie GLMakie . activate! () u = LinRange ( - 1.5 , 2 , 50 ) v = LinRange ( 0 , 2 * pi , 50 ) X1 = [ u for u in u , v in v ] Y1 = [( u ^ 2 + 1 ) * cos ( v ) for u in u , v in v ] Z1 = [( u ^ 2 + 1 ) * sin ( v ) for u in u , v in v ] fig , ax , pltobj = surface ( X1 , Y1 , Z1 ; shading = true , ambient = Vec3f ( 0.95 , 0.95 , 0.95 ), backlight = 1.0f0 , color = sqrt . ( X1 .^ 2 .+ Y1 .^ 2 .+ Z1 .^ 2 ), colormap = :Isfahan2 , transparency = true , figure = (; resolution = ( 1200 , 800 ), fontsize = 22 )) wireframe! ( X1 , Y1 , Z1 ; linewidth = 0.2 , transparency = true ) Colorbar ( fig [ 1 , 2 ], pltobj , height = Relative ( 0.5 )) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Revolution surface s"},{"location":"examples/generated/2d/surfaces/surface/","text":"using GLMakie GLMakie . activate! () x = y = LinRange ( - 2 , 2 , 51 ) z = ( - x .* exp . ( - x .^ 2 .- ( y ' ) .^ 2 )) .* 4 zmin , zmax = minimum ( z ), maximum ( z ) cmap = :viridis fig = Figure ( resolution = ( 1200 , 800 ), fontsize = 22 ) ax = Axis3 ( fig [ 1 , 1 ], aspect = :data , perspectiveness = 0.5 , elevation = \u03c0 / 9 , xzpanelcolor = ( :black , 0.75 ), yzpanelcolor = ( :black , 0.75 ), zgridcolor = :grey , ygridcolor = :grey , xgridcolor = :grey ) sm = surface! ( ax , x , y , z ; colormap = cmap , colorrange = ( zmin , zmax ), transparency = true ) xm , ym , zm = minimum ( ax . finallimits []) contour! ( ax , x , y , z ; levels = 20 , colormap = cmap , linewidth = 2 , colorrange = ( zmin , zmax ), transformation = ( :xy , zmin ), transparency = true ) wireframe! ( ax , x , y , z ; overdraw = true , transparency = true , color = ( :black , 0.1 )) Colorbar ( fig [ 1 , 2 ], sm , height = Relative ( 0.5 )) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"surface"},{"location":"examples/generated/2d/surfaces/tesseralSphericalH/","text":"using GLMakie using AssociatedLegendrePolynomials GLMakie . activate! () function Y ( \u03b8 , \u03d5 , l , m ) if m < 0 return ( - 1 ) ^ m * \u221a 2 * Nlm ( l , abs ( m )) * Plm ( l , abs ( m ), cos ( \u03b8 )) * sin ( abs ( m ) * \u03d5 ) elseif m == 0 return sqrt (( 2 * l + 1 ) / 4 \u03c0 ) * Plm ( l , m , cos ( \u03b8 )) else return ( - 1 ) ^ m * \u221a 2 * Nlm ( l , m ) * Plm ( l , m , cos ( \u03b8 )) * cos ( m * \u03d5 ) end end # Grids of polar and azimuthal angles \u03b8 = LinRange ( 0 , \u03c0 , 200 ) \u03d5 = LinRange ( 0 , 2 \u03c0 , 200 ) x = [ sin ( \u03b8 ) * sin ( \u03d5 ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] y = [ sin ( \u03b8 ) * cos ( \u03d5 ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] z = [ cos ( \u03b8 ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] l = 10 m = 1 Ygrid = [ Y ( \u03b8 , \u03d5 , l , m ) for \u03b8 in \u03b8 , \u03d5 in \u03d5 ] Ylm = abs . ( Ygrid ) cmap = [ :dodgerblue , :white ] with_theme ( theme_dark ()) do fig = Figure ( resolution = ( 1200 , 800 ), fontsize = 22 ) axs = [ Axis3 ( fig [ 1 , j ], aspect = :data ) for j in 1 : 2 ] pltobj = surface! ( axs [ 1 ], x , y , z ; color = Ygrid , colormap = cmap , shading = false ) surface! ( axs [ 2 ], Ylm .* x , Ylm .* y , Ylm .* z ; color = Ygrid , colormap = cmap , shading = false ) Colorbar ( fig [ 1 , 3 ], pltobj , label = \"Y\u2097\u2098(\u03b8,\u03d5)\" , tickwidth = 2 , tickalign = 1 , width = 25 , ticksize = 25 , height = Relative ( 0.5 )) fig [ 0 , 1 : 2 ] = Label ( fig , \"Tesseral Spherical Harmonics l = $ ( l ) , m = $ ( m ) \" , textsize = 30 , color = ( :white , 0.85 )) hidedecorations! . ( axs ; grid = false ) fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"AssociatedLegendrePolynomials\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [2119f1ac] AssociatedLegendrePolynomials v1.0.0 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Tesseral Spherical Harmonics"},{"location":"examples/generated/2d/surfaces/torus/","text":"using GLMakie GLMakie . activate! () U = LinRange ( - pi , pi , 100 ) V = LinRange ( - pi , pi , 20 ) x1 = [ cos ( u ) + 0.5 * cos ( u ) * cos ( v ) for u in U , v in V ] y1 = [ sin ( u ) + 0.5 * sin ( u ) * cos ( v ) for u in U , v in V ] z1 = [ 0.5 * sin ( v ) for u in U , v in V ] x2 = [ 1 + cos ( u ) + 0.5 * cos ( u ) * cos ( v ) for u in U , v in V ] y2 = [ 0.5 * sin ( v ) for u in U , v in V ] z2 = [ sin ( u ) + 0.5 * sin ( u ) * cos ( v ) for u in U , v in V ] fig = Figure ( resolution = ( 1200 , 800 )) ax = LScene ( fig , show_axis = true ) tori1 = surface! ( ax , x1 , y1 , z1 ; colormap = :viridis , shading = false , transparency = true ) tori2 = surface! ( ax , x2 , y2 , z2 ; colormap = :plasma , shading = false , transparency = false ) wireframe! ( ax , x1 , y1 , z1 ; linewidth = 0.5 , transparency = true ) axis = ax . scene [ OldAxis ] axis [ :names , :axisnames ] = ( \"x\" , \"y\" , \"z\" ) tstyle = axis [ :names ] # get the nested attributes and work directly with them tstyle [ :textsize ] = 15 tstyle [ :textcolor ] = ( :red , :green , :black ) tstyle [ :font ] = \"helvetica\" tstyle [ :gap ] = 10 axis [ :ticks ][ :textcolor ] = :black axis [ :ticks ][ :textsize ] = 10 cbar1 = Colorbar ( fig , tori1 , label = \"z\" , width = 25 , ticklabelsize = 20 , labelsize = 20 , ticksize = 25 , tickalign = 1 , height = Relative ( 0.5 )) cbar2 = Colorbar ( fig , tori2 , label = \"z\" , width = 25 , flipaxis = false , labelsize = 20 , ticklabelsize = 20 , ticksize = 25 , tickalign = 1 , height = Relative ( 0.5 )) fig [ 1 , 2 ] = ax fig [ 1 , 3 ] = cbar1 fig [ 1 , 1 ] = cbar2 colgap! ( fig . layout , 2 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"Torus"},{"location":"examples/generated/2d/themes/black_epicycloid/","text":"using CairoMakie function EpicycloidLines () ecycl_x ( r , k , \u03b8 ) = r * ( k .+ 1 ) .* cos . ( \u03b8 ) .- r * cos . (( k .+ 1 ) .* \u03b8 ) ecycl_y ( r , k , \u03b8 ) = r * ( k .+ 1 ) .* sin . ( \u03b8 ) .- r * sin . (( k .+ 1 ) .* \u03b8 ) \u03b8 = LinRange ( 0 , 6.2 \u03c0 , 1000 ) tronLegacy = [ \"#FF410DFF\" , \"#6EE2FFFF\" , \"#F7C530FF\" , \"#95CC5EFF\" , \"#D0DFE6FF\" , \"#F79D1EFF\" , \"#748AA6FF\" ] fig = Figure ( resolution = ( 600 , 400 ), font = :sans ) ax = Axis ( fig [ 1 , 1 ], aspect = 1 , title = \"Epicycloid\" , xlabel = \"x(\u03b8) = r(k+1)cos(\u03b8) -rcos((k+1)\u03b8)\" , ylabel = \"y(\u03b8) = r(k+1)cos(\u03b8) -rcos((k+1)\u03b8)\" ) [ lines! ( ecycl_x ( 2 k , k , \u03b8 ), ecycl_y ( 2 k , k , \u03b8 ), linewidth = 1.5 , label = \" $ ( k ) \" , color = tronLegacy [ indx ]) for ( indx , k ) in enumerate ( 2 : 0.5 : 5 )] Legend ( fig [ 1 , 2 ], ax , \"k , r = 2k\" ) colsize! ( fig . layout , 1 , Aspect ( 1 , 1.0 )) fig end fig = with_theme ( EpicycloidLines , theme_black ()) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"black: epicycloid"},{"location":"examples/generated/2d/themes/dark_surface_contour3d_streamplot/","text":"# example modified from mthelm85 using GLMakie , ForwardDiff GLMakie . activate! () f ( x , y ) = - 5 * x * y * exp ( - x ^ 2 - y ^ 2 ) x = y = - 1 : 0.05 : 1.0 z = [ f ( i , j ) for i in x , j in y ]; # This is the same function as above, just modified so that it will # work with ForwardDiff g ( x , y ) = [ - 5 * x * y * exp ( - x ^ 2 - y ^ 2 )] J ( xx , yy ) = ForwardDiff . jacobian ( x -> g ( x [ 1 ], x [ 2 ]), [ xx , yy ]) field ( i , j ) = Point2f ( J ( i , j )[ 1 ], J ( i , j )[ 2 ]) zmin , zmax = minimum ( z ), maximum ( z ) cmap = :viridis function plot () fig = Figure ( resolution = ( 1200 , 800 )) ax1 = Axis3 ( fig [ 1 , 1 ], aspect = ( 1 , 1 , 1 ), perspectiveness = 0.5 , elevation = \u03c0 / 3.5 , azimuth = 0.1 \u03c0 ,) ax2 = Axis ( fig [ 1 , 2 ], aspect = DataAspect (), xlabel = \"x\" , ylabel = \"y\" ) surface! ( ax1 , x , y , z ; colormap = cmap , colorrange = ( zmin , zmax ), transparency = true ) contour3d! ( ax1 , x , y , z .+ 0.005 ; levels = 15 , linewidth = 2 , color = :white , transparency = true ) wireframe! ( ax1 , x , y , z ; color = ( :black , 0.1 ), transparency = true ) streamplot! ( ax1 , field , - 1 .. 1 , - 1 .. 1 ; colormap = cmap , gridsize = ( 40 , 40 ), arrow_size = 15 , linewidth = 1 , transformation = ( :xy , - zmax )) streamplot! ( ax2 , field , - 1 .. 1 , - 1 .. 1 ; colormap = cmap , gridsize = ( 40 , 40 ), arrow_size = 15 , linewidth = 1 ) fig end fig = with_theme ( plot , theme_dark ()) Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"ForwardDiff\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [f6369f11] ForwardDiff v0.10.32 [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"dark: surface, contour3d & streamplot"},{"location":"examples/generated/2d/themes/ggplot2_stem/","text":"using CairoMakie , Random Random . seed! ( 2 ) t = 0.3 : 0.3 : 3 \u03c0 my_markers = [ :circle , :rect , :utriangle , :dtriangle , :diamond , :pentagon , :cross , :xcross ] with_theme ( theme_ggplot2 ()) do fig , ax , = stem ( t , 1.5 exp . ( - t / 5 ) .* cos . ( t ); color = 1 : length ( t ), colormap = :linear_wyor_100_45_c55_n256 , stemcolor = 1 : length ( t ), stemcolormap = :linear_wcmr_100_45_c42_n256 , figure = (; resolution = ( 600 , 400 ))) stem! ( t .+ 0.15 , - cos . ( t ) ./ t .+ 0.25 ; color = :transparent , stemwidth = 0.5 , marker = :rect , markersize = 10 , strokewidth = 1 , strokecolor = :black ) stem! ( 1 : 8 , 1.5 randn ( 8 ); marker = my_markers , color = tuple . ( resample_cmap ( :mk_12 , 8 ), 0.65 ), stemlinestyle = :dash , stemcolor = resample_cmap ( :mk_12 , 8 ), markersize = 15 * rand ( 8 ) .+ 10 , strokewidth = 1.5 , strokecolor = resample_cmap ( :mk_12 , 8 )) hidedecorations! ( ax ; grid = false ) fig end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"ggplot2: stem"},{"location":"examples/generated/2d/themes/light_ngon/","text":"using CairoMakie , GeometryBasics n = 20 function ngonShape ( h , k , r , n ) Polygon ([ Point2f ( h .+ r * sin . ( m * 2 \u03c0 / n ), k .+ r * cos . ( m * 2 \u03c0 / n )) for m in 1 : n ]) end polysCentric = [ ngonShape ( 0 , 0 , 3 / i ^ 1.5 , i ) for i in 3 : n ] polysCircular = [ ngonShape ( \u221a 2 / 2 * sin ( \u03b8 ), \u221a 2 / 2 * cos ( \u03b8 ), 0.15 / \u221a idx , idx + 2 ) for ( idx , \u03b8 ) in enumerate ( LinRange ( 0 , 2 \u03c0 * ( 1 - 1 / ( n - 2 )), n - 2 ))] cmap = cgrad ( :Homer1 , n ) with_theme ( theme_light ()) do fig , ax , = poly ( polysCentric ; color = 1 : n - 2 , colormap = cmap , axis = (; aspect = DataAspect ()), figure = (; resolution = ( 600 , 400 ))) poly! ( polysCircular ; color = 1 : n - 2 , colormap = cmap ) hidedecorations! ( ax ; grid = false ) hidespines! ( ax ) end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"GeometryBasics\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 \u2303 [5c1252a2] GeometryBasics v0.4.2 Info Packages marked with \u2303 have new versions available This page was generated using Literate.jl .","title":"light: poly"},{"location":"examples/generated/2d/themes/minimal_series/","text":"using CairoMakie , Random , LaTeXStrings Random . seed! ( 123 ) m = 200 function spiral (; a = 1 , n = 100 , h = 0 , k = 0 ) \u03c6 = LinRange ( rand () + 1 , 6 \u03c0 , n ) h .+ rand ( - 1 : 2 : 1 ) * a * cos . ( \u03c6 ) ./ \u03c6 , k .+ rand ( - 1 : 2 : 1 ) * a * sin . ( \u03c6 ) ./ \u03c6 end x = raw \"x=a\\,\\cos(\\varphi)/\\varphi,\\quad \" y = raw \"y=a\\,\\sin(\\varphi)/\\varphi,\\quad \" curves = [ spiral (; a = rand (), h = rand ( - 1 : 1 )) for i in 1 : m ] with_theme ( theme_minimal ()) do fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]) series! ( curves ; color = categorical_colors ( :inferno , m ), linewidth = 1.5 ) text! ( latexstring ( x * y * \" \\\\ varphi>0\" ), position = ( - 1 , - 1 )) hidedecorations! ( ax ; grid = false ) end Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"LaTeXStrings\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [b964fa9f] LaTeXStrings v1.3.0 This page was generated using Literate.jl .","title":"minimal: series"},{"location":"examples/generated/2d/violins/airquality/","text":"using CairoMakie , RDatasets , Colors , ColorSchemes airquality = dataset ( \"datasets\" , \"airquality\" ) categories = [ \"Ozone\" , \"Solar.R\" , \"Wind\" , \"Temp\" ] colors = categorical_colors ( :Set1 , length ( categories )) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xticks = ( 1 : length ( categories ), categories )) for ( indx , f ) in enumerate ( categories ) datam = filter ( x -> x !== missing , airquality [ : , f ]) a = fill ( indx , length ( datam )) violin! ( ax , a , datam ; width = 0.35 , color = ( colors [ indx ], 0.45 ), strokecolor = colors [ indx ], show_median = true , mediancolor = :black ) end fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"RDatasets\" , \"Colors\" , \"ColorSchemes\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [35d6a980] ColorSchemes v3.19.0 [5ae59095] Colors v0.12.8 [ce6b1742] RDatasets v0.7.7 This page was generated using Literate.jl .","title":"Violins: airquality"},{"location":"examples/generated/2d/violins/collection_violins/","text":"using CairoMakie , Distributions , Random Random . seed! ( 124 ) n = 4 colors = resample_cmap ( :seaborn_colorblind , 8 ) sides = [ :left , :right , :right ] fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ]; palette = (; patchcolor = colors )) for i in [ - 5 , 5 ], j in 1 : n violin! ( fill ( j , 1000 ), rand ( Normal ( i , rand () + 0.5 ), 1000 ); side = i >- 3 ? sides [ rand ( 1 : 3 )] : :both ) end violin! ( fill ( 2.5 , 1000 ), rand ( Normal ( 0 , 2.5 ), 1000 ); color = :transparent , strokewidth = 0.85 , strokecolor = :grey10 , show_median = true , mediancolor = :black ) violin! ( fill ( 4.5 , 1000 ), rand ( Normal ( 2 , 2 ), 1000 ); color = ( :dodgerblue , 0.1 ), strokewidth = 0.85 , strokecolor = :dodgerblue , show_median = true , medianlinewidth = 3 ) ax . xticks = ( 1 : n , string . ( 'A' : 'D' )) hideydecorations! ( ax ; grid = false ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" , \"Distributions\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 [31c24e10] Distributions v0.25.70 This page was generated using Literate.jl .","title":"Violins collection"},{"location":"examples/generated/2d/violins/single/","text":"using CairoMakie , Random Random . seed! ( 13 ) n = 3000 data = randn ( n ) a = fill ( 1 , n ) fig = Figure ( resolution = ( 600 , 400 )) ax = Axis ( fig [ 1 , 1 ], xlabel = \"variable\" , ylabel = \"values\" , xticks = ([ 1 ], [ \"normal Distribution\" ])) violin! ( ax , a , data ; width = 0.35 , color = ( :orangered , 0.45 ), show_median = true , mediancolor = :navy , strokecolor = :black , strokewidth = 1 , label = \"vertical\" ) limits! ( ax , 0 , 2 , - 5 , 5 ) axislegend ( ax , position = :rt ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"CairoMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [13f3f980] CairoMakie v0.8.13 This page was generated using Literate.jl .","title":"Single"},{"location":"examples/generated/2d/volume/volume/","text":"using GLMakie , ColorSchemes GLMakie . activate! () x = y = z = 1 : 10 f ( x , y , z ) = x ^ 2 + y ^ 2 + z ^ 2 vol = [ f ( ix , iy , iz ) for ix in x , iy in y , iz in z ] fig , ax , _ = volume ( x , y , z , vol ; colorrange = ( minimum ( vol ), maximum ( vol )), colormap = :Egypt , transparency = true , figure = (; resolution = ( 1200 , 800 )), axis = (; type = Axis3 , perspectiveness = 0.5 , azimuth = 2.19 , elevation = 0.57 , aspect = ( 1 , 1 , 1 ) ) ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [e9467ef8] GLMakie v0.6.13 This page was generated using Literate.jl .","title":"volume"},{"location":"examples/generated/2d/volume/volume_contour_scatters/","text":"using GLMakie , ColorSchemes using GeometryBasics : Rect3f x = y = z = - 1 : 0.2 : 1 vol1 = [ ix * iy * iz for ix in x , iy in y , iz in z ] points3d = [ Point3f ( ix , iy , iz ) for ix in x , iy in y , iz in z ]; # scale everything to the interval 0,1 (things don't seem to work with colorrange) vol2 = ( vol1 .+ 1 ) ./ 2 ; # colormap with transparency in the middle cmap = :Hiroshige n = 101 g ( x ) = x ^ 2 alphas = [ g ( x ) for x in range ( - 1 , 1 , length = n )] cmap_alpha = resample_cmap ( cmap , n ; alpha = alphas ) # the plot fig = Figure ( resolution = ( 1200 , 1200 )) ax1 = Axis3 ( fig [ 1 , 1 ], perspectiveness = 0.5 , azimuth = 7.19 , elevation = 0.57 , aspect = ( 1 , 1 , 1 )) ax2 = Axis3 ( fig [ 1 , 2 ], perspectiveness = 0.5 , azimuth = 6.62 , elevation = 0.57 , aspect = ( 1 , 1 , 1 )) ax3 = Axis3 ( fig [ 2 , 1 ], perspectiveness = 0.5 , azimuth = 7.38 , elevation = 0.57 , aspect = ( 1 , 1 , 1 )) ax4 = Axis3 ( fig [ 2 , 2 ], perspectiveness = 0.5 , azimuth = 6.64 , elevation = 0.57 , aspect = ( 1 , 1 , 1 )) volume! ( ax1 , x , y , z , vol2 ; colormap = cmap , transparency = true ) contour! ( ax2 , x , y , z , vol1 ; colormap = cmap , alpha = 0.05 , levels = [ collect ( - 1 : 0.01 :- 0.3 ) ... , collect ( 0.3 : 0.01 : 1 ) ... ]) meshscatter! ( ax3 , vec ( points3d ); color = vec ( vol1 ), colormap = cmap_alpha ) meshscatter! ( ax4 , vec ( points3d ); color = vec ( vol1 ), colormap = cmap_alpha , marker = Rect3f ( Vec3f ( - 1 ), Vec3f ( 2 ))) limits! ( ax4 , - 1.2 , 1.2 , - 1.2 , 1.2 , - 1.2 , 1.2 ) fig Warning This example was autogenerated using: using Pkg Pkg . status ([ \"GLMakie\" , \"ColorSchemes\" , \"GeometryBasics\" ]) Status `~/work/BeautifulMakie/BeautifulMakie/docs/Project.toml` [35d6a980] ColorSchemes v3.19.0 [e9467ef8] GLMakie v0.6.13 \u2303 [5c1252a2] GeometryBasics v0.4.2 Info Packages marked with \u2303 have new versions available This page was generated using Literate.jl .","title":"volume contour & scatters"}]}